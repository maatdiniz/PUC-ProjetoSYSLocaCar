
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Marca
 * 
 */
export type Marca = $Result.DefaultSelection<Prisma.$MarcaPayload>
/**
 * Model Modelo
 * 
 */
export type Modelo = $Result.DefaultSelection<Prisma.$ModeloPayload>
/**
 * Model Veiculo
 * 
 */
export type Veiculo = $Result.DefaultSelection<Prisma.$VeiculoPayload>
/**
 * Model Manutencao
 * 
 */
export type Manutencao = $Result.DefaultSelection<Prisma.$ManutencaoPayload>
/**
 * Model ContratoLocacao
 * 
 */
export type ContratoLocacao = $Result.DefaultSelection<Prisma.$ContratoLocacaoPayload>
/**
 * Model Ocorrencia
 * 
 */
export type Ocorrencia = $Result.DefaultSelection<Prisma.$OcorrenciaPayload>
/**
 * Model Pagamento
 * 
 */
export type Pagamento = $Result.DefaultSelection<Prisma.$PagamentoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categorias
 * const categorias = await prisma.categoria.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categorias
   * const categorias = await prisma.categoria.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.marca`: Exposes CRUD operations for the **Marca** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Marcas
    * const marcas = await prisma.marca.findMany()
    * ```
    */
  get marca(): Prisma.MarcaDelegate<ExtArgs>;

  /**
   * `prisma.modelo`: Exposes CRUD operations for the **Modelo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modelos
    * const modelos = await prisma.modelo.findMany()
    * ```
    */
  get modelo(): Prisma.ModeloDelegate<ExtArgs>;

  /**
   * `prisma.veiculo`: Exposes CRUD operations for the **Veiculo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Veiculos
    * const veiculos = await prisma.veiculo.findMany()
    * ```
    */
  get veiculo(): Prisma.VeiculoDelegate<ExtArgs>;

  /**
   * `prisma.manutencao`: Exposes CRUD operations for the **Manutencao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Manutencaos
    * const manutencaos = await prisma.manutencao.findMany()
    * ```
    */
  get manutencao(): Prisma.ManutencaoDelegate<ExtArgs>;

  /**
   * `prisma.contratoLocacao`: Exposes CRUD operations for the **ContratoLocacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContratoLocacaos
    * const contratoLocacaos = await prisma.contratoLocacao.findMany()
    * ```
    */
  get contratoLocacao(): Prisma.ContratoLocacaoDelegate<ExtArgs>;

  /**
   * `prisma.ocorrencia`: Exposes CRUD operations for the **Ocorrencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ocorrencias
    * const ocorrencias = await prisma.ocorrencia.findMany()
    * ```
    */
  get ocorrencia(): Prisma.OcorrenciaDelegate<ExtArgs>;

  /**
   * `prisma.pagamento`: Exposes CRUD operations for the **Pagamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagamentos
    * const pagamentos = await prisma.pagamento.findMany()
    * ```
    */
  get pagamento(): Prisma.PagamentoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Categoria: 'Categoria',
    Marca: 'Marca',
    Modelo: 'Modelo',
    Veiculo: 'Veiculo',
    Manutencao: 'Manutencao',
    ContratoLocacao: 'ContratoLocacao',
    Ocorrencia: 'Ocorrencia',
    Pagamento: 'Pagamento'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "categoria" | "marca" | "modelo" | "veiculo" | "manutencao" | "contratoLocacao" | "ocorrencia" | "pagamento"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Marca: {
        payload: Prisma.$MarcaPayload<ExtArgs>
        fields: Prisma.MarcaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarcaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarcaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          findFirst: {
            args: Prisma.MarcaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarcaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          findMany: {
            args: Prisma.MarcaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>[]
          }
          create: {
            args: Prisma.MarcaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          createMany: {
            args: Prisma.MarcaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarcaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>[]
          }
          delete: {
            args: Prisma.MarcaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          update: {
            args: Prisma.MarcaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          deleteMany: {
            args: Prisma.MarcaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarcaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MarcaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarcaPayload>
          }
          aggregate: {
            args: Prisma.MarcaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarca>
          }
          groupBy: {
            args: Prisma.MarcaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarcaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarcaCountArgs<ExtArgs>
            result: $Utils.Optional<MarcaCountAggregateOutputType> | number
          }
        }
      }
      Modelo: {
        payload: Prisma.$ModeloPayload<ExtArgs>
        fields: Prisma.ModeloFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModeloFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModeloFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          findFirst: {
            args: Prisma.ModeloFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModeloFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          findMany: {
            args: Prisma.ModeloFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>[]
          }
          create: {
            args: Prisma.ModeloCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          createMany: {
            args: Prisma.ModeloCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModeloCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>[]
          }
          delete: {
            args: Prisma.ModeloDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          update: {
            args: Prisma.ModeloUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          deleteMany: {
            args: Prisma.ModeloDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModeloUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModeloUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeloPayload>
          }
          aggregate: {
            args: Prisma.ModeloAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModelo>
          }
          groupBy: {
            args: Prisma.ModeloGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModeloGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModeloCountArgs<ExtArgs>
            result: $Utils.Optional<ModeloCountAggregateOutputType> | number
          }
        }
      }
      Veiculo: {
        payload: Prisma.$VeiculoPayload<ExtArgs>
        fields: Prisma.VeiculoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VeiculoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VeiculoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          findFirst: {
            args: Prisma.VeiculoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VeiculoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          findMany: {
            args: Prisma.VeiculoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>[]
          }
          create: {
            args: Prisma.VeiculoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          createMany: {
            args: Prisma.VeiculoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VeiculoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>[]
          }
          delete: {
            args: Prisma.VeiculoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          update: {
            args: Prisma.VeiculoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          deleteMany: {
            args: Prisma.VeiculoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VeiculoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VeiculoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VeiculoPayload>
          }
          aggregate: {
            args: Prisma.VeiculoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVeiculo>
          }
          groupBy: {
            args: Prisma.VeiculoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VeiculoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VeiculoCountArgs<ExtArgs>
            result: $Utils.Optional<VeiculoCountAggregateOutputType> | number
          }
        }
      }
      Manutencao: {
        payload: Prisma.$ManutencaoPayload<ExtArgs>
        fields: Prisma.ManutencaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManutencaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManutencaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          findFirst: {
            args: Prisma.ManutencaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManutencaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          findMany: {
            args: Prisma.ManutencaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>[]
          }
          create: {
            args: Prisma.ManutencaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          createMany: {
            args: Prisma.ManutencaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ManutencaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>[]
          }
          delete: {
            args: Prisma.ManutencaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          update: {
            args: Prisma.ManutencaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          deleteMany: {
            args: Prisma.ManutencaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManutencaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ManutencaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          aggregate: {
            args: Prisma.ManutencaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManutencao>
          }
          groupBy: {
            args: Prisma.ManutencaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManutencaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManutencaoCountArgs<ExtArgs>
            result: $Utils.Optional<ManutencaoCountAggregateOutputType> | number
          }
        }
      }
      ContratoLocacao: {
        payload: Prisma.$ContratoLocacaoPayload<ExtArgs>
        fields: Prisma.ContratoLocacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContratoLocacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContratoLocacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          findFirst: {
            args: Prisma.ContratoLocacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContratoLocacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          findMany: {
            args: Prisma.ContratoLocacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>[]
          }
          create: {
            args: Prisma.ContratoLocacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          createMany: {
            args: Prisma.ContratoLocacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContratoLocacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>[]
          }
          delete: {
            args: Prisma.ContratoLocacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          update: {
            args: Prisma.ContratoLocacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          deleteMany: {
            args: Prisma.ContratoLocacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContratoLocacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContratoLocacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContratoLocacaoPayload>
          }
          aggregate: {
            args: Prisma.ContratoLocacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContratoLocacao>
          }
          groupBy: {
            args: Prisma.ContratoLocacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContratoLocacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContratoLocacaoCountArgs<ExtArgs>
            result: $Utils.Optional<ContratoLocacaoCountAggregateOutputType> | number
          }
        }
      }
      Ocorrencia: {
        payload: Prisma.$OcorrenciaPayload<ExtArgs>
        fields: Prisma.OcorrenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OcorrenciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OcorrenciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          findFirst: {
            args: Prisma.OcorrenciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OcorrenciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          findMany: {
            args: Prisma.OcorrenciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          create: {
            args: Prisma.OcorrenciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          createMany: {
            args: Prisma.OcorrenciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OcorrenciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>[]
          }
          delete: {
            args: Prisma.OcorrenciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          update: {
            args: Prisma.OcorrenciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          deleteMany: {
            args: Prisma.OcorrenciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OcorrenciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OcorrenciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OcorrenciaPayload>
          }
          aggregate: {
            args: Prisma.OcorrenciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOcorrencia>
          }
          groupBy: {
            args: Prisma.OcorrenciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<OcorrenciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.OcorrenciaCountArgs<ExtArgs>
            result: $Utils.Optional<OcorrenciaCountAggregateOutputType> | number
          }
        }
      }
      Pagamento: {
        payload: Prisma.$PagamentoPayload<ExtArgs>
        fields: Prisma.PagamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PagamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          findFirst: {
            args: Prisma.PagamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          findMany: {
            args: Prisma.PagamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>[]
          }
          create: {
            args: Prisma.PagamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          createMany: {
            args: Prisma.PagamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PagamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>[]
          }
          delete: {
            args: Prisma.PagamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          update: {
            args: Prisma.PagamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          deleteMany: {
            args: Prisma.PagamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PagamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PagamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagamentoPayload>
          }
          aggregate: {
            args: Prisma.PagamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePagamento>
          }
          groupBy: {
            args: Prisma.PagamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PagamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagamentoCountArgs<ExtArgs>
            result: $Utils.Optional<PagamentoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    modelos: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelos?: boolean | CategoriaCountOutputTypeCountModelosArgs
  }

  // Custom InputTypes
  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountModelosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloWhereInput
  }


  /**
   * Count Type MarcaCountOutputType
   */

  export type MarcaCountOutputType = {
    modelos: number
  }

  export type MarcaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelos?: boolean | MarcaCountOutputTypeCountModelosArgs
  }

  // Custom InputTypes
  /**
   * MarcaCountOutputType without action
   */
  export type MarcaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarcaCountOutputType
     */
    select?: MarcaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarcaCountOutputType without action
   */
  export type MarcaCountOutputTypeCountModelosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloWhereInput
  }


  /**
   * Count Type ModeloCountOutputType
   */

  export type ModeloCountOutputType = {
    veiculos: number
  }

  export type ModeloCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | ModeloCountOutputTypeCountVeiculosArgs
  }

  // Custom InputTypes
  /**
   * ModeloCountOutputType without action
   */
  export type ModeloCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloCountOutputType
     */
    select?: ModeloCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModeloCountOutputType without action
   */
  export type ModeloCountOutputTypeCountVeiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VeiculoWhereInput
  }


  /**
   * Count Type VeiculoCountOutputType
   */

  export type VeiculoCountOutputType = {
    manutencoes: number
    contratos: number
  }

  export type VeiculoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manutencoes?: boolean | VeiculoCountOutputTypeCountManutencoesArgs
    contratos?: boolean | VeiculoCountOutputTypeCountContratosArgs
  }

  // Custom InputTypes
  /**
   * VeiculoCountOutputType without action
   */
  export type VeiculoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VeiculoCountOutputType
     */
    select?: VeiculoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VeiculoCountOutputType without action
   */
  export type VeiculoCountOutputTypeCountManutencoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManutencaoWhereInput
  }

  /**
   * VeiculoCountOutputType without action
   */
  export type VeiculoCountOutputTypeCountContratosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoLocacaoWhereInput
  }


  /**
   * Count Type ContratoLocacaoCountOutputType
   */

  export type ContratoLocacaoCountOutputType = {
    veiculos: number
    ocorrencias: number
    pagamentos: number
  }

  export type ContratoLocacaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | ContratoLocacaoCountOutputTypeCountVeiculosArgs
    ocorrencias?: boolean | ContratoLocacaoCountOutputTypeCountOcorrenciasArgs
    pagamentos?: boolean | ContratoLocacaoCountOutputTypeCountPagamentosArgs
  }

  // Custom InputTypes
  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacaoCountOutputType
     */
    select?: ContratoLocacaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeCountVeiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VeiculoWhereInput
  }

  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeCountOcorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
  }

  /**
   * ContratoLocacaoCountOutputType without action
   */
  export type ContratoLocacaoCountOutputTypeCountPagamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagamentoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
    valorLocacao: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
    valorLocacao: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    valorLocacao: number | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    valorLocacao: number | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    tipo: number
    valorLocacao: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
    valorLocacao?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
    valorLocacao?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    tipo?: true
    valorLocacao?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    tipo?: true
    valorLocacao?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    tipo?: true
    valorLocacao?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    tipo: string
    valorLocacao: number
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    valorLocacao?: boolean
    modelos?: boolean | Categoria$modelosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    valorLocacao?: boolean
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectScalar = {
    id?: boolean
    tipo?: boolean
    valorLocacao?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelos?: boolean | Categoria$modelosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      modelos: Prisma.$ModeloPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      valorLocacao: number
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categorias and returns the data saved in the database.
     * @param {CategoriaCreateManyAndReturnArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categorias and only return the `id`
     * const categoriaWithIdOnly = await prisma.categoria.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    modelos<T extends Categoria$modelosArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$modelosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'Int'>
    readonly tipo: FieldRef<"Categoria", 'String'>
    readonly valorLocacao: FieldRef<"Categoria", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria createManyAndReturn
   */
  export type CategoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria.modelos
   */
  export type Categoria$modelosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    where?: ModeloWhereInput
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    cursor?: ModeloWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Marca
   */

  export type AggregateMarca = {
    _count: MarcaCountAggregateOutputType | null
    _avg: MarcaAvgAggregateOutputType | null
    _sum: MarcaSumAggregateOutputType | null
    _min: MarcaMinAggregateOutputType | null
    _max: MarcaMaxAggregateOutputType | null
  }

  export type MarcaAvgAggregateOutputType = {
    id: number | null
  }

  export type MarcaSumAggregateOutputType = {
    id: number | null
  }

  export type MarcaMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type MarcaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type MarcaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type MarcaAvgAggregateInputType = {
    id?: true
  }

  export type MarcaSumAggregateInputType = {
    id?: true
  }

  export type MarcaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type MarcaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type MarcaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type MarcaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Marca to aggregate.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Marcas
    **/
    _count?: true | MarcaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarcaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarcaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarcaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarcaMaxAggregateInputType
  }

  export type GetMarcaAggregateType<T extends MarcaAggregateArgs> = {
        [P in keyof T & keyof AggregateMarca]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarca[P]>
      : GetScalarType<T[P], AggregateMarca[P]>
  }




  export type MarcaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarcaWhereInput
    orderBy?: MarcaOrderByWithAggregationInput | MarcaOrderByWithAggregationInput[]
    by: MarcaScalarFieldEnum[] | MarcaScalarFieldEnum
    having?: MarcaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarcaCountAggregateInputType | true
    _avg?: MarcaAvgAggregateInputType
    _sum?: MarcaSumAggregateInputType
    _min?: MarcaMinAggregateInputType
    _max?: MarcaMaxAggregateInputType
  }

  export type MarcaGroupByOutputType = {
    id: number
    nome: string
    _count: MarcaCountAggregateOutputType | null
    _avg: MarcaAvgAggregateOutputType | null
    _sum: MarcaSumAggregateOutputType | null
    _min: MarcaMinAggregateOutputType | null
    _max: MarcaMaxAggregateOutputType | null
  }

  type GetMarcaGroupByPayload<T extends MarcaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarcaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarcaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarcaGroupByOutputType[P]>
            : GetScalarType<T[P], MarcaGroupByOutputType[P]>
        }
      >
    >


  export type MarcaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    modelos?: boolean | Marca$modelosArgs<ExtArgs>
    _count?: boolean | MarcaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marca"]>

  export type MarcaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["marca"]>

  export type MarcaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type MarcaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelos?: boolean | Marca$modelosArgs<ExtArgs>
    _count?: boolean | MarcaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MarcaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MarcaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Marca"
    objects: {
      modelos: Prisma.$ModeloPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["marca"]>
    composites: {}
  }

  type MarcaGetPayload<S extends boolean | null | undefined | MarcaDefaultArgs> = $Result.GetResult<Prisma.$MarcaPayload, S>

  type MarcaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MarcaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MarcaCountAggregateInputType | true
    }

  export interface MarcaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Marca'], meta: { name: 'Marca' } }
    /**
     * Find zero or one Marca that matches the filter.
     * @param {MarcaFindUniqueArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarcaFindUniqueArgs>(args: SelectSubset<T, MarcaFindUniqueArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Marca that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MarcaFindUniqueOrThrowArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarcaFindUniqueOrThrowArgs>(args: SelectSubset<T, MarcaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Marca that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaFindFirstArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarcaFindFirstArgs>(args?: SelectSubset<T, MarcaFindFirstArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Marca that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaFindFirstOrThrowArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarcaFindFirstOrThrowArgs>(args?: SelectSubset<T, MarcaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Marcas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Marcas
     * const marcas = await prisma.marca.findMany()
     * 
     * // Get first 10 Marcas
     * const marcas = await prisma.marca.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marcaWithIdOnly = await prisma.marca.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarcaFindManyArgs>(args?: SelectSubset<T, MarcaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Marca.
     * @param {MarcaCreateArgs} args - Arguments to create a Marca.
     * @example
     * // Create one Marca
     * const Marca = await prisma.marca.create({
     *   data: {
     *     // ... data to create a Marca
     *   }
     * })
     * 
     */
    create<T extends MarcaCreateArgs>(args: SelectSubset<T, MarcaCreateArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Marcas.
     * @param {MarcaCreateManyArgs} args - Arguments to create many Marcas.
     * @example
     * // Create many Marcas
     * const marca = await prisma.marca.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarcaCreateManyArgs>(args?: SelectSubset<T, MarcaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Marcas and returns the data saved in the database.
     * @param {MarcaCreateManyAndReturnArgs} args - Arguments to create many Marcas.
     * @example
     * // Create many Marcas
     * const marca = await prisma.marca.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Marcas and only return the `id`
     * const marcaWithIdOnly = await prisma.marca.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarcaCreateManyAndReturnArgs>(args?: SelectSubset<T, MarcaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Marca.
     * @param {MarcaDeleteArgs} args - Arguments to delete one Marca.
     * @example
     * // Delete one Marca
     * const Marca = await prisma.marca.delete({
     *   where: {
     *     // ... filter to delete one Marca
     *   }
     * })
     * 
     */
    delete<T extends MarcaDeleteArgs>(args: SelectSubset<T, MarcaDeleteArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Marca.
     * @param {MarcaUpdateArgs} args - Arguments to update one Marca.
     * @example
     * // Update one Marca
     * const marca = await prisma.marca.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarcaUpdateArgs>(args: SelectSubset<T, MarcaUpdateArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Marcas.
     * @param {MarcaDeleteManyArgs} args - Arguments to filter Marcas to delete.
     * @example
     * // Delete a few Marcas
     * const { count } = await prisma.marca.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarcaDeleteManyArgs>(args?: SelectSubset<T, MarcaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Marcas
     * const marca = await prisma.marca.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarcaUpdateManyArgs>(args: SelectSubset<T, MarcaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Marca.
     * @param {MarcaUpsertArgs} args - Arguments to update or create a Marca.
     * @example
     * // Update or create a Marca
     * const marca = await prisma.marca.upsert({
     *   create: {
     *     // ... data to create a Marca
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Marca we want to update
     *   }
     * })
     */
    upsert<T extends MarcaUpsertArgs>(args: SelectSubset<T, MarcaUpsertArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaCountArgs} args - Arguments to filter Marcas to count.
     * @example
     * // Count the number of Marcas
     * const count = await prisma.marca.count({
     *   where: {
     *     // ... the filter for the Marcas we want to count
     *   }
     * })
    **/
    count<T extends MarcaCountArgs>(
      args?: Subset<T, MarcaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarcaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Marca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarcaAggregateArgs>(args: Subset<T, MarcaAggregateArgs>): Prisma.PrismaPromise<GetMarcaAggregateType<T>>

    /**
     * Group by Marca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarcaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarcaGroupByArgs['orderBy'] }
        : { orderBy?: MarcaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarcaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarcaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Marca model
   */
  readonly fields: MarcaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Marca.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarcaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    modelos<T extends Marca$modelosArgs<ExtArgs> = {}>(args?: Subset<T, Marca$modelosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Marca model
   */ 
  interface MarcaFieldRefs {
    readonly id: FieldRef<"Marca", 'Int'>
    readonly nome: FieldRef<"Marca", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Marca findUnique
   */
  export type MarcaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca findUniqueOrThrow
   */
  export type MarcaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca findFirst
   */
  export type MarcaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcas.
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcas.
     */
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * Marca findFirstOrThrow
   */
  export type MarcaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marca to fetch.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcas.
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcas.
     */
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * Marca findMany
   */
  export type MarcaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter, which Marcas to fetch.
     */
    where?: MarcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     */
    orderBy?: MarcaOrderByWithRelationInput | MarcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Marcas.
     */
    cursor?: MarcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     */
    skip?: number
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * Marca create
   */
  export type MarcaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * The data needed to create a Marca.
     */
    data: XOR<MarcaCreateInput, MarcaUncheckedCreateInput>
  }

  /**
   * Marca createMany
   */
  export type MarcaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Marcas.
     */
    data: MarcaCreateManyInput | MarcaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Marca createManyAndReturn
   */
  export type MarcaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Marcas.
     */
    data: MarcaCreateManyInput | MarcaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Marca update
   */
  export type MarcaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * The data needed to update a Marca.
     */
    data: XOR<MarcaUpdateInput, MarcaUncheckedUpdateInput>
    /**
     * Choose, which Marca to update.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca updateMany
   */
  export type MarcaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Marcas.
     */
    data: XOR<MarcaUpdateManyMutationInput, MarcaUncheckedUpdateManyInput>
    /**
     * Filter which Marcas to update
     */
    where?: MarcaWhereInput
  }

  /**
   * Marca upsert
   */
  export type MarcaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * The filter to search for the Marca to update in case it exists.
     */
    where: MarcaWhereUniqueInput
    /**
     * In case the Marca found by the `where` argument doesn't exist, create a new Marca with this data.
     */
    create: XOR<MarcaCreateInput, MarcaUncheckedCreateInput>
    /**
     * In case the Marca was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarcaUpdateInput, MarcaUncheckedUpdateInput>
  }

  /**
   * Marca delete
   */
  export type MarcaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
    /**
     * Filter which Marca to delete.
     */
    where: MarcaWhereUniqueInput
  }

  /**
   * Marca deleteMany
   */
  export type MarcaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Marcas to delete
     */
    where?: MarcaWhereInput
  }

  /**
   * Marca.modelos
   */
  export type Marca$modelosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    where?: ModeloWhereInput
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    cursor?: ModeloWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Marca without action
   */
  export type MarcaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marca
     */
    select?: MarcaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarcaInclude<ExtArgs> | null
  }


  /**
   * Model Modelo
   */

  export type AggregateModelo = {
    _count: ModeloCountAggregateOutputType | null
    _avg: ModeloAvgAggregateOutputType | null
    _sum: ModeloSumAggregateOutputType | null
    _min: ModeloMinAggregateOutputType | null
    _max: ModeloMaxAggregateOutputType | null
  }

  export type ModeloAvgAggregateOutputType = {
    id: number | null
    qtModelo: number | null
    categoriaId: number | null
    marcaId: number | null
  }

  export type ModeloSumAggregateOutputType = {
    id: number | null
    qtModelo: number | null
    categoriaId: number | null
    marcaId: number | null
  }

  export type ModeloMinAggregateOutputType = {
    id: number | null
    nome: string | null
    anoModelo: Date | null
    qtModelo: number | null
    categoriaId: number | null
    marcaId: number | null
  }

  export type ModeloMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    anoModelo: Date | null
    qtModelo: number | null
    categoriaId: number | null
    marcaId: number | null
  }

  export type ModeloCountAggregateOutputType = {
    id: number
    nome: number
    anoModelo: number
    qtModelo: number
    categoriaId: number
    marcaId: number
    _all: number
  }


  export type ModeloAvgAggregateInputType = {
    id?: true
    qtModelo?: true
    categoriaId?: true
    marcaId?: true
  }

  export type ModeloSumAggregateInputType = {
    id?: true
    qtModelo?: true
    categoriaId?: true
    marcaId?: true
  }

  export type ModeloMinAggregateInputType = {
    id?: true
    nome?: true
    anoModelo?: true
    qtModelo?: true
    categoriaId?: true
    marcaId?: true
  }

  export type ModeloMaxAggregateInputType = {
    id?: true
    nome?: true
    anoModelo?: true
    qtModelo?: true
    categoriaId?: true
    marcaId?: true
  }

  export type ModeloCountAggregateInputType = {
    id?: true
    nome?: true
    anoModelo?: true
    qtModelo?: true
    categoriaId?: true
    marcaId?: true
    _all?: true
  }

  export type ModeloAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Modelo to aggregate.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Modelos
    **/
    _count?: true | ModeloCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModeloAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModeloSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModeloMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModeloMaxAggregateInputType
  }

  export type GetModeloAggregateType<T extends ModeloAggregateArgs> = {
        [P in keyof T & keyof AggregateModelo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModelo[P]>
      : GetScalarType<T[P], AggregateModelo[P]>
  }




  export type ModeloGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloWhereInput
    orderBy?: ModeloOrderByWithAggregationInput | ModeloOrderByWithAggregationInput[]
    by: ModeloScalarFieldEnum[] | ModeloScalarFieldEnum
    having?: ModeloScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModeloCountAggregateInputType | true
    _avg?: ModeloAvgAggregateInputType
    _sum?: ModeloSumAggregateInputType
    _min?: ModeloMinAggregateInputType
    _max?: ModeloMaxAggregateInputType
  }

  export type ModeloGroupByOutputType = {
    id: number
    nome: string
    anoModelo: Date
    qtModelo: number
    categoriaId: number
    marcaId: number
    _count: ModeloCountAggregateOutputType | null
    _avg: ModeloAvgAggregateOutputType | null
    _sum: ModeloSumAggregateOutputType | null
    _min: ModeloMinAggregateOutputType | null
    _max: ModeloMaxAggregateOutputType | null
  }

  type GetModeloGroupByPayload<T extends ModeloGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModeloGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModeloGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModeloGroupByOutputType[P]>
            : GetScalarType<T[P], ModeloGroupByOutputType[P]>
        }
      >
    >


  export type ModeloSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    anoModelo?: boolean
    qtModelo?: boolean
    categoriaId?: boolean
    marcaId?: boolean
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
    veiculos?: boolean | Modelo$veiculosArgs<ExtArgs>
    _count?: boolean | ModeloCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modelo"]>

  export type ModeloSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    anoModelo?: boolean
    qtModelo?: boolean
    categoriaId?: boolean
    marcaId?: boolean
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modelo"]>

  export type ModeloSelectScalar = {
    id?: boolean
    nome?: boolean
    anoModelo?: boolean
    qtModelo?: boolean
    categoriaId?: boolean
    marcaId?: boolean
  }

  export type ModeloInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
    veiculos?: boolean | Modelo$veiculosArgs<ExtArgs>
    _count?: boolean | ModeloCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModeloIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    marca?: boolean | MarcaDefaultArgs<ExtArgs>
  }

  export type $ModeloPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Modelo"
    objects: {
      categoria: Prisma.$CategoriaPayload<ExtArgs>
      marca: Prisma.$MarcaPayload<ExtArgs>
      veiculos: Prisma.$VeiculoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      anoModelo: Date
      qtModelo: number
      categoriaId: number
      marcaId: number
    }, ExtArgs["result"]["modelo"]>
    composites: {}
  }

  type ModeloGetPayload<S extends boolean | null | undefined | ModeloDefaultArgs> = $Result.GetResult<Prisma.$ModeloPayload, S>

  type ModeloCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModeloFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModeloCountAggregateInputType | true
    }

  export interface ModeloDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Modelo'], meta: { name: 'Modelo' } }
    /**
     * Find zero or one Modelo that matches the filter.
     * @param {ModeloFindUniqueArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModeloFindUniqueArgs>(args: SelectSubset<T, ModeloFindUniqueArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Modelo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModeloFindUniqueOrThrowArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModeloFindUniqueOrThrowArgs>(args: SelectSubset<T, ModeloFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Modelo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloFindFirstArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModeloFindFirstArgs>(args?: SelectSubset<T, ModeloFindFirstArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Modelo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloFindFirstOrThrowArgs} args - Arguments to find a Modelo
     * @example
     * // Get one Modelo
     * const modelo = await prisma.modelo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModeloFindFirstOrThrowArgs>(args?: SelectSubset<T, ModeloFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Modelos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modelos
     * const modelos = await prisma.modelo.findMany()
     * 
     * // Get first 10 Modelos
     * const modelos = await prisma.modelo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modeloWithIdOnly = await prisma.modelo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModeloFindManyArgs>(args?: SelectSubset<T, ModeloFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Modelo.
     * @param {ModeloCreateArgs} args - Arguments to create a Modelo.
     * @example
     * // Create one Modelo
     * const Modelo = await prisma.modelo.create({
     *   data: {
     *     // ... data to create a Modelo
     *   }
     * })
     * 
     */
    create<T extends ModeloCreateArgs>(args: SelectSubset<T, ModeloCreateArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Modelos.
     * @param {ModeloCreateManyArgs} args - Arguments to create many Modelos.
     * @example
     * // Create many Modelos
     * const modelo = await prisma.modelo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModeloCreateManyArgs>(args?: SelectSubset<T, ModeloCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Modelos and returns the data saved in the database.
     * @param {ModeloCreateManyAndReturnArgs} args - Arguments to create many Modelos.
     * @example
     * // Create many Modelos
     * const modelo = await prisma.modelo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Modelos and only return the `id`
     * const modeloWithIdOnly = await prisma.modelo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModeloCreateManyAndReturnArgs>(args?: SelectSubset<T, ModeloCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Modelo.
     * @param {ModeloDeleteArgs} args - Arguments to delete one Modelo.
     * @example
     * // Delete one Modelo
     * const Modelo = await prisma.modelo.delete({
     *   where: {
     *     // ... filter to delete one Modelo
     *   }
     * })
     * 
     */
    delete<T extends ModeloDeleteArgs>(args: SelectSubset<T, ModeloDeleteArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Modelo.
     * @param {ModeloUpdateArgs} args - Arguments to update one Modelo.
     * @example
     * // Update one Modelo
     * const modelo = await prisma.modelo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModeloUpdateArgs>(args: SelectSubset<T, ModeloUpdateArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Modelos.
     * @param {ModeloDeleteManyArgs} args - Arguments to filter Modelos to delete.
     * @example
     * // Delete a few Modelos
     * const { count } = await prisma.modelo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModeloDeleteManyArgs>(args?: SelectSubset<T, ModeloDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modelos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modelos
     * const modelo = await prisma.modelo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModeloUpdateManyArgs>(args: SelectSubset<T, ModeloUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Modelo.
     * @param {ModeloUpsertArgs} args - Arguments to update or create a Modelo.
     * @example
     * // Update or create a Modelo
     * const modelo = await prisma.modelo.upsert({
     *   create: {
     *     // ... data to create a Modelo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Modelo we want to update
     *   }
     * })
     */
    upsert<T extends ModeloUpsertArgs>(args: SelectSubset<T, ModeloUpsertArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Modelos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloCountArgs} args - Arguments to filter Modelos to count.
     * @example
     * // Count the number of Modelos
     * const count = await prisma.modelo.count({
     *   where: {
     *     // ... the filter for the Modelos we want to count
     *   }
     * })
    **/
    count<T extends ModeloCountArgs>(
      args?: Subset<T, ModeloCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModeloCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Modelo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModeloAggregateArgs>(args: Subset<T, ModeloAggregateArgs>): Prisma.PrismaPromise<GetModeloAggregateType<T>>

    /**
     * Group by Modelo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModeloGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModeloGroupByArgs['orderBy'] }
        : { orderBy?: ModeloGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModeloGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModeloGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Modelo model
   */
  readonly fields: ModeloFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Modelo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModeloClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    marca<T extends MarcaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarcaDefaultArgs<ExtArgs>>): Prisma__MarcaClient<$Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    veiculos<T extends Modelo$veiculosArgs<ExtArgs> = {}>(args?: Subset<T, Modelo$veiculosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Modelo model
   */ 
  interface ModeloFieldRefs {
    readonly id: FieldRef<"Modelo", 'Int'>
    readonly nome: FieldRef<"Modelo", 'String'>
    readonly anoModelo: FieldRef<"Modelo", 'DateTime'>
    readonly qtModelo: FieldRef<"Modelo", 'Int'>
    readonly categoriaId: FieldRef<"Modelo", 'Int'>
    readonly marcaId: FieldRef<"Modelo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Modelo findUnique
   */
  export type ModeloFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo findUniqueOrThrow
   */
  export type ModeloFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo findFirst
   */
  export type ModeloFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modelos.
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modelos.
     */
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Modelo findFirstOrThrow
   */
  export type ModeloFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelo to fetch.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modelos.
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modelos.
     */
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Modelo findMany
   */
  export type ModeloFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter, which Modelos to fetch.
     */
    where?: ModeloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modelos to fetch.
     */
    orderBy?: ModeloOrderByWithRelationInput | ModeloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Modelos.
     */
    cursor?: ModeloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modelos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modelos.
     */
    skip?: number
    distinct?: ModeloScalarFieldEnum | ModeloScalarFieldEnum[]
  }

  /**
   * Modelo create
   */
  export type ModeloCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * The data needed to create a Modelo.
     */
    data: XOR<ModeloCreateInput, ModeloUncheckedCreateInput>
  }

  /**
   * Modelo createMany
   */
  export type ModeloCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Modelos.
     */
    data: ModeloCreateManyInput | ModeloCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Modelo createManyAndReturn
   */
  export type ModeloCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Modelos.
     */
    data: ModeloCreateManyInput | ModeloCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Modelo update
   */
  export type ModeloUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * The data needed to update a Modelo.
     */
    data: XOR<ModeloUpdateInput, ModeloUncheckedUpdateInput>
    /**
     * Choose, which Modelo to update.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo updateMany
   */
  export type ModeloUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Modelos.
     */
    data: XOR<ModeloUpdateManyMutationInput, ModeloUncheckedUpdateManyInput>
    /**
     * Filter which Modelos to update
     */
    where?: ModeloWhereInput
  }

  /**
   * Modelo upsert
   */
  export type ModeloUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * The filter to search for the Modelo to update in case it exists.
     */
    where: ModeloWhereUniqueInput
    /**
     * In case the Modelo found by the `where` argument doesn't exist, create a new Modelo with this data.
     */
    create: XOR<ModeloCreateInput, ModeloUncheckedCreateInput>
    /**
     * In case the Modelo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModeloUpdateInput, ModeloUncheckedUpdateInput>
  }

  /**
   * Modelo delete
   */
  export type ModeloDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
    /**
     * Filter which Modelo to delete.
     */
    where: ModeloWhereUniqueInput
  }

  /**
   * Modelo deleteMany
   */
  export type ModeloDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Modelos to delete
     */
    where?: ModeloWhereInput
  }

  /**
   * Modelo.veiculos
   */
  export type Modelo$veiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    where?: VeiculoWhereInput
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    cursor?: VeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Modelo without action
   */
  export type ModeloDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Modelo
     */
    select?: ModeloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloInclude<ExtArgs> | null
  }


  /**
   * Model Veiculo
   */

  export type AggregateVeiculo = {
    _count: VeiculoCountAggregateOutputType | null
    _avg: VeiculoAvgAggregateOutputType | null
    _sum: VeiculoSumAggregateOutputType | null
    _min: VeiculoMinAggregateOutputType | null
    _max: VeiculoMaxAggregateOutputType | null
  }

  export type VeiculoAvgAggregateOutputType = {
    id: number | null
    modeloId: number | null
  }

  export type VeiculoSumAggregateOutputType = {
    id: number | null
    modeloId: number | null
  }

  export type VeiculoMinAggregateOutputType = {
    id: number | null
    placa: string | null
    chassi: string | null
    anoFabricacao: Date | null
    cor: string | null
    status: string | null
    modeloId: number | null
  }

  export type VeiculoMaxAggregateOutputType = {
    id: number | null
    placa: string | null
    chassi: string | null
    anoFabricacao: Date | null
    cor: string | null
    status: string | null
    modeloId: number | null
  }

  export type VeiculoCountAggregateOutputType = {
    id: number
    placa: number
    chassi: number
    anoFabricacao: number
    cor: number
    status: number
    modeloId: number
    _all: number
  }


  export type VeiculoAvgAggregateInputType = {
    id?: true
    modeloId?: true
  }

  export type VeiculoSumAggregateInputType = {
    id?: true
    modeloId?: true
  }

  export type VeiculoMinAggregateInputType = {
    id?: true
    placa?: true
    chassi?: true
    anoFabricacao?: true
    cor?: true
    status?: true
    modeloId?: true
  }

  export type VeiculoMaxAggregateInputType = {
    id?: true
    placa?: true
    chassi?: true
    anoFabricacao?: true
    cor?: true
    status?: true
    modeloId?: true
  }

  export type VeiculoCountAggregateInputType = {
    id?: true
    placa?: true
    chassi?: true
    anoFabricacao?: true
    cor?: true
    status?: true
    modeloId?: true
    _all?: true
  }

  export type VeiculoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Veiculo to aggregate.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Veiculos
    **/
    _count?: true | VeiculoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VeiculoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VeiculoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VeiculoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VeiculoMaxAggregateInputType
  }

  export type GetVeiculoAggregateType<T extends VeiculoAggregateArgs> = {
        [P in keyof T & keyof AggregateVeiculo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVeiculo[P]>
      : GetScalarType<T[P], AggregateVeiculo[P]>
  }




  export type VeiculoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VeiculoWhereInput
    orderBy?: VeiculoOrderByWithAggregationInput | VeiculoOrderByWithAggregationInput[]
    by: VeiculoScalarFieldEnum[] | VeiculoScalarFieldEnum
    having?: VeiculoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VeiculoCountAggregateInputType | true
    _avg?: VeiculoAvgAggregateInputType
    _sum?: VeiculoSumAggregateInputType
    _min?: VeiculoMinAggregateInputType
    _max?: VeiculoMaxAggregateInputType
  }

  export type VeiculoGroupByOutputType = {
    id: number
    placa: string
    chassi: string
    anoFabricacao: Date
    cor: string
    status: string
    modeloId: number
    _count: VeiculoCountAggregateOutputType | null
    _avg: VeiculoAvgAggregateOutputType | null
    _sum: VeiculoSumAggregateOutputType | null
    _min: VeiculoMinAggregateOutputType | null
    _max: VeiculoMaxAggregateOutputType | null
  }

  type GetVeiculoGroupByPayload<T extends VeiculoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VeiculoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VeiculoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VeiculoGroupByOutputType[P]>
            : GetScalarType<T[P], VeiculoGroupByOutputType[P]>
        }
      >
    >


  export type VeiculoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placa?: boolean
    chassi?: boolean
    anoFabricacao?: boolean
    cor?: boolean
    status?: boolean
    modeloId?: boolean
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
    manutencoes?: boolean | Veiculo$manutencoesArgs<ExtArgs>
    contratos?: boolean | Veiculo$contratosArgs<ExtArgs>
    _count?: boolean | VeiculoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["veiculo"]>

  export type VeiculoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placa?: boolean
    chassi?: boolean
    anoFabricacao?: boolean
    cor?: boolean
    status?: boolean
    modeloId?: boolean
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["veiculo"]>

  export type VeiculoSelectScalar = {
    id?: boolean
    placa?: boolean
    chassi?: boolean
    anoFabricacao?: boolean
    cor?: boolean
    status?: boolean
    modeloId?: boolean
  }

  export type VeiculoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
    manutencoes?: boolean | Veiculo$manutencoesArgs<ExtArgs>
    contratos?: boolean | Veiculo$contratosArgs<ExtArgs>
    _count?: boolean | VeiculoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VeiculoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelo?: boolean | ModeloDefaultArgs<ExtArgs>
  }

  export type $VeiculoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Veiculo"
    objects: {
      modelo: Prisma.$ModeloPayload<ExtArgs>
      manutencoes: Prisma.$ManutencaoPayload<ExtArgs>[]
      contratos: Prisma.$ContratoLocacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      placa: string
      chassi: string
      anoFabricacao: Date
      cor: string
      status: string
      modeloId: number
    }, ExtArgs["result"]["veiculo"]>
    composites: {}
  }

  type VeiculoGetPayload<S extends boolean | null | undefined | VeiculoDefaultArgs> = $Result.GetResult<Prisma.$VeiculoPayload, S>

  type VeiculoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VeiculoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VeiculoCountAggregateInputType | true
    }

  export interface VeiculoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Veiculo'], meta: { name: 'Veiculo' } }
    /**
     * Find zero or one Veiculo that matches the filter.
     * @param {VeiculoFindUniqueArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VeiculoFindUniqueArgs>(args: SelectSubset<T, VeiculoFindUniqueArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Veiculo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VeiculoFindUniqueOrThrowArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VeiculoFindUniqueOrThrowArgs>(args: SelectSubset<T, VeiculoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Veiculo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindFirstArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VeiculoFindFirstArgs>(args?: SelectSubset<T, VeiculoFindFirstArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Veiculo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindFirstOrThrowArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VeiculoFindFirstOrThrowArgs>(args?: SelectSubset<T, VeiculoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Veiculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Veiculos
     * const veiculos = await prisma.veiculo.findMany()
     * 
     * // Get first 10 Veiculos
     * const veiculos = await prisma.veiculo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const veiculoWithIdOnly = await prisma.veiculo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VeiculoFindManyArgs>(args?: SelectSubset<T, VeiculoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Veiculo.
     * @param {VeiculoCreateArgs} args - Arguments to create a Veiculo.
     * @example
     * // Create one Veiculo
     * const Veiculo = await prisma.veiculo.create({
     *   data: {
     *     // ... data to create a Veiculo
     *   }
     * })
     * 
     */
    create<T extends VeiculoCreateArgs>(args: SelectSubset<T, VeiculoCreateArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Veiculos.
     * @param {VeiculoCreateManyArgs} args - Arguments to create many Veiculos.
     * @example
     * // Create many Veiculos
     * const veiculo = await prisma.veiculo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VeiculoCreateManyArgs>(args?: SelectSubset<T, VeiculoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Veiculos and returns the data saved in the database.
     * @param {VeiculoCreateManyAndReturnArgs} args - Arguments to create many Veiculos.
     * @example
     * // Create many Veiculos
     * const veiculo = await prisma.veiculo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Veiculos and only return the `id`
     * const veiculoWithIdOnly = await prisma.veiculo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VeiculoCreateManyAndReturnArgs>(args?: SelectSubset<T, VeiculoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Veiculo.
     * @param {VeiculoDeleteArgs} args - Arguments to delete one Veiculo.
     * @example
     * // Delete one Veiculo
     * const Veiculo = await prisma.veiculo.delete({
     *   where: {
     *     // ... filter to delete one Veiculo
     *   }
     * })
     * 
     */
    delete<T extends VeiculoDeleteArgs>(args: SelectSubset<T, VeiculoDeleteArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Veiculo.
     * @param {VeiculoUpdateArgs} args - Arguments to update one Veiculo.
     * @example
     * // Update one Veiculo
     * const veiculo = await prisma.veiculo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VeiculoUpdateArgs>(args: SelectSubset<T, VeiculoUpdateArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Veiculos.
     * @param {VeiculoDeleteManyArgs} args - Arguments to filter Veiculos to delete.
     * @example
     * // Delete a few Veiculos
     * const { count } = await prisma.veiculo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VeiculoDeleteManyArgs>(args?: SelectSubset<T, VeiculoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Veiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Veiculos
     * const veiculo = await prisma.veiculo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VeiculoUpdateManyArgs>(args: SelectSubset<T, VeiculoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Veiculo.
     * @param {VeiculoUpsertArgs} args - Arguments to update or create a Veiculo.
     * @example
     * // Update or create a Veiculo
     * const veiculo = await prisma.veiculo.upsert({
     *   create: {
     *     // ... data to create a Veiculo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Veiculo we want to update
     *   }
     * })
     */
    upsert<T extends VeiculoUpsertArgs>(args: SelectSubset<T, VeiculoUpsertArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Veiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoCountArgs} args - Arguments to filter Veiculos to count.
     * @example
     * // Count the number of Veiculos
     * const count = await prisma.veiculo.count({
     *   where: {
     *     // ... the filter for the Veiculos we want to count
     *   }
     * })
    **/
    count<T extends VeiculoCountArgs>(
      args?: Subset<T, VeiculoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VeiculoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Veiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VeiculoAggregateArgs>(args: Subset<T, VeiculoAggregateArgs>): Prisma.PrismaPromise<GetVeiculoAggregateType<T>>

    /**
     * Group by Veiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VeiculoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VeiculoGroupByArgs['orderBy'] }
        : { orderBy?: VeiculoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VeiculoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVeiculoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Veiculo model
   */
  readonly fields: VeiculoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Veiculo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VeiculoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    modelo<T extends ModeloDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ModeloDefaultArgs<ExtArgs>>): Prisma__ModeloClient<$Result.GetResult<Prisma.$ModeloPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    manutencoes<T extends Veiculo$manutencoesArgs<ExtArgs> = {}>(args?: Subset<T, Veiculo$manutencoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "findMany"> | Null>
    contratos<T extends Veiculo$contratosArgs<ExtArgs> = {}>(args?: Subset<T, Veiculo$contratosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Veiculo model
   */ 
  interface VeiculoFieldRefs {
    readonly id: FieldRef<"Veiculo", 'Int'>
    readonly placa: FieldRef<"Veiculo", 'String'>
    readonly chassi: FieldRef<"Veiculo", 'String'>
    readonly anoFabricacao: FieldRef<"Veiculo", 'DateTime'>
    readonly cor: FieldRef<"Veiculo", 'String'>
    readonly status: FieldRef<"Veiculo", 'String'>
    readonly modeloId: FieldRef<"Veiculo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Veiculo findUnique
   */
  export type VeiculoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo findUniqueOrThrow
   */
  export type VeiculoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo findFirst
   */
  export type VeiculoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Veiculos.
     */
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo findFirstOrThrow
   */
  export type VeiculoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Veiculos.
     */
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo findMany
   */
  export type VeiculoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter, which Veiculos to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * Veiculo create
   */
  export type VeiculoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * The data needed to create a Veiculo.
     */
    data: XOR<VeiculoCreateInput, VeiculoUncheckedCreateInput>
  }

  /**
   * Veiculo createMany
   */
  export type VeiculoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Veiculos.
     */
    data: VeiculoCreateManyInput | VeiculoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Veiculo createManyAndReturn
   */
  export type VeiculoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Veiculos.
     */
    data: VeiculoCreateManyInput | VeiculoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Veiculo update
   */
  export type VeiculoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * The data needed to update a Veiculo.
     */
    data: XOR<VeiculoUpdateInput, VeiculoUncheckedUpdateInput>
    /**
     * Choose, which Veiculo to update.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo updateMany
   */
  export type VeiculoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Veiculos.
     */
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyInput>
    /**
     * Filter which Veiculos to update
     */
    where?: VeiculoWhereInput
  }

  /**
   * Veiculo upsert
   */
  export type VeiculoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * The filter to search for the Veiculo to update in case it exists.
     */
    where: VeiculoWhereUniqueInput
    /**
     * In case the Veiculo found by the `where` argument doesn't exist, create a new Veiculo with this data.
     */
    create: XOR<VeiculoCreateInput, VeiculoUncheckedCreateInput>
    /**
     * In case the Veiculo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VeiculoUpdateInput, VeiculoUncheckedUpdateInput>
  }

  /**
   * Veiculo delete
   */
  export type VeiculoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    /**
     * Filter which Veiculo to delete.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo deleteMany
   */
  export type VeiculoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Veiculos to delete
     */
    where?: VeiculoWhereInput
  }

  /**
   * Veiculo.manutencoes
   */
  export type Veiculo$manutencoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    where?: ManutencaoWhereInput
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    cursor?: ManutencaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }

  /**
   * Veiculo.contratos
   */
  export type Veiculo$contratosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    where?: ContratoLocacaoWhereInput
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    cursor?: ContratoLocacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * Veiculo without action
   */
  export type VeiculoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
  }


  /**
   * Model Manutencao
   */

  export type AggregateManutencao = {
    _count: ManutencaoCountAggregateOutputType | null
    _avg: ManutencaoAvgAggregateOutputType | null
    _sum: ManutencaoSumAggregateOutputType | null
    _min: ManutencaoMinAggregateOutputType | null
    _max: ManutencaoMaxAggregateOutputType | null
  }

  export type ManutencaoAvgAggregateOutputType = {
    id: number | null
    valorManutencao: number | null
    veiculoId: number | null
  }

  export type ManutencaoSumAggregateOutputType = {
    id: number | null
    valorManutencao: number | null
    veiculoId: number | null
  }

  export type ManutencaoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    dataManutencao: Date | null
    valorManutencao: number | null
    veiculoId: number | null
  }

  export type ManutencaoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    dataManutencao: Date | null
    valorManutencao: number | null
    veiculoId: number | null
  }

  export type ManutencaoCountAggregateOutputType = {
    id: number
    descricao: number
    dataManutencao: number
    valorManutencao: number
    veiculoId: number
    _all: number
  }


  export type ManutencaoAvgAggregateInputType = {
    id?: true
    valorManutencao?: true
    veiculoId?: true
  }

  export type ManutencaoSumAggregateInputType = {
    id?: true
    valorManutencao?: true
    veiculoId?: true
  }

  export type ManutencaoMinAggregateInputType = {
    id?: true
    descricao?: true
    dataManutencao?: true
    valorManutencao?: true
    veiculoId?: true
  }

  export type ManutencaoMaxAggregateInputType = {
    id?: true
    descricao?: true
    dataManutencao?: true
    valorManutencao?: true
    veiculoId?: true
  }

  export type ManutencaoCountAggregateInputType = {
    id?: true
    descricao?: true
    dataManutencao?: true
    valorManutencao?: true
    veiculoId?: true
    _all?: true
  }

  export type ManutencaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manutencao to aggregate.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Manutencaos
    **/
    _count?: true | ManutencaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManutencaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManutencaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManutencaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManutencaoMaxAggregateInputType
  }

  export type GetManutencaoAggregateType<T extends ManutencaoAggregateArgs> = {
        [P in keyof T & keyof AggregateManutencao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManutencao[P]>
      : GetScalarType<T[P], AggregateManutencao[P]>
  }




  export type ManutencaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManutencaoWhereInput
    orderBy?: ManutencaoOrderByWithAggregationInput | ManutencaoOrderByWithAggregationInput[]
    by: ManutencaoScalarFieldEnum[] | ManutencaoScalarFieldEnum
    having?: ManutencaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManutencaoCountAggregateInputType | true
    _avg?: ManutencaoAvgAggregateInputType
    _sum?: ManutencaoSumAggregateInputType
    _min?: ManutencaoMinAggregateInputType
    _max?: ManutencaoMaxAggregateInputType
  }

  export type ManutencaoGroupByOutputType = {
    id: number
    descricao: string
    dataManutencao: Date
    valorManutencao: number
    veiculoId: number
    _count: ManutencaoCountAggregateOutputType | null
    _avg: ManutencaoAvgAggregateOutputType | null
    _sum: ManutencaoSumAggregateOutputType | null
    _min: ManutencaoMinAggregateOutputType | null
    _max: ManutencaoMaxAggregateOutputType | null
  }

  type GetManutencaoGroupByPayload<T extends ManutencaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManutencaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManutencaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManutencaoGroupByOutputType[P]>
            : GetScalarType<T[P], ManutencaoGroupByOutputType[P]>
        }
      >
    >


  export type ManutencaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    dataManutencao?: boolean
    valorManutencao?: boolean
    veiculoId?: boolean
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manutencao"]>

  export type ManutencaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    dataManutencao?: boolean
    valorManutencao?: boolean
    veiculoId?: boolean
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manutencao"]>

  export type ManutencaoSelectScalar = {
    id?: boolean
    descricao?: boolean
    dataManutencao?: boolean
    valorManutencao?: boolean
    veiculoId?: boolean
  }

  export type ManutencaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }
  export type ManutencaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculo?: boolean | VeiculoDefaultArgs<ExtArgs>
  }

  export type $ManutencaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Manutencao"
    objects: {
      veiculo: Prisma.$VeiculoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      dataManutencao: Date
      valorManutencao: number
      veiculoId: number
    }, ExtArgs["result"]["manutencao"]>
    composites: {}
  }

  type ManutencaoGetPayload<S extends boolean | null | undefined | ManutencaoDefaultArgs> = $Result.GetResult<Prisma.$ManutencaoPayload, S>

  type ManutencaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManutencaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ManutencaoCountAggregateInputType | true
    }

  export interface ManutencaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manutencao'], meta: { name: 'Manutencao' } }
    /**
     * Find zero or one Manutencao that matches the filter.
     * @param {ManutencaoFindUniqueArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManutencaoFindUniqueArgs>(args: SelectSubset<T, ManutencaoFindUniqueArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Manutencao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ManutencaoFindUniqueOrThrowArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManutencaoFindUniqueOrThrowArgs>(args: SelectSubset<T, ManutencaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Manutencao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoFindFirstArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManutencaoFindFirstArgs>(args?: SelectSubset<T, ManutencaoFindFirstArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Manutencao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoFindFirstOrThrowArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManutencaoFindFirstOrThrowArgs>(args?: SelectSubset<T, ManutencaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Manutencaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Manutencaos
     * const manutencaos = await prisma.manutencao.findMany()
     * 
     * // Get first 10 Manutencaos
     * const manutencaos = await prisma.manutencao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manutencaoWithIdOnly = await prisma.manutencao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManutencaoFindManyArgs>(args?: SelectSubset<T, ManutencaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Manutencao.
     * @param {ManutencaoCreateArgs} args - Arguments to create a Manutencao.
     * @example
     * // Create one Manutencao
     * const Manutencao = await prisma.manutencao.create({
     *   data: {
     *     // ... data to create a Manutencao
     *   }
     * })
     * 
     */
    create<T extends ManutencaoCreateArgs>(args: SelectSubset<T, ManutencaoCreateArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Manutencaos.
     * @param {ManutencaoCreateManyArgs} args - Arguments to create many Manutencaos.
     * @example
     * // Create many Manutencaos
     * const manutencao = await prisma.manutencao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManutencaoCreateManyArgs>(args?: SelectSubset<T, ManutencaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Manutencaos and returns the data saved in the database.
     * @param {ManutencaoCreateManyAndReturnArgs} args - Arguments to create many Manutencaos.
     * @example
     * // Create many Manutencaos
     * const manutencao = await prisma.manutencao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Manutencaos and only return the `id`
     * const manutencaoWithIdOnly = await prisma.manutencao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ManutencaoCreateManyAndReturnArgs>(args?: SelectSubset<T, ManutencaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Manutencao.
     * @param {ManutencaoDeleteArgs} args - Arguments to delete one Manutencao.
     * @example
     * // Delete one Manutencao
     * const Manutencao = await prisma.manutencao.delete({
     *   where: {
     *     // ... filter to delete one Manutencao
     *   }
     * })
     * 
     */
    delete<T extends ManutencaoDeleteArgs>(args: SelectSubset<T, ManutencaoDeleteArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Manutencao.
     * @param {ManutencaoUpdateArgs} args - Arguments to update one Manutencao.
     * @example
     * // Update one Manutencao
     * const manutencao = await prisma.manutencao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManutencaoUpdateArgs>(args: SelectSubset<T, ManutencaoUpdateArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Manutencaos.
     * @param {ManutencaoDeleteManyArgs} args - Arguments to filter Manutencaos to delete.
     * @example
     * // Delete a few Manutencaos
     * const { count } = await prisma.manutencao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManutencaoDeleteManyArgs>(args?: SelectSubset<T, ManutencaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Manutencaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Manutencaos
     * const manutencao = await prisma.manutencao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManutencaoUpdateManyArgs>(args: SelectSubset<T, ManutencaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Manutencao.
     * @param {ManutencaoUpsertArgs} args - Arguments to update or create a Manutencao.
     * @example
     * // Update or create a Manutencao
     * const manutencao = await prisma.manutencao.upsert({
     *   create: {
     *     // ... data to create a Manutencao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manutencao we want to update
     *   }
     * })
     */
    upsert<T extends ManutencaoUpsertArgs>(args: SelectSubset<T, ManutencaoUpsertArgs<ExtArgs>>): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Manutencaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoCountArgs} args - Arguments to filter Manutencaos to count.
     * @example
     * // Count the number of Manutencaos
     * const count = await prisma.manutencao.count({
     *   where: {
     *     // ... the filter for the Manutencaos we want to count
     *   }
     * })
    **/
    count<T extends ManutencaoCountArgs>(
      args?: Subset<T, ManutencaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManutencaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manutencao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManutencaoAggregateArgs>(args: Subset<T, ManutencaoAggregateArgs>): Prisma.PrismaPromise<GetManutencaoAggregateType<T>>

    /**
     * Group by Manutencao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManutencaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManutencaoGroupByArgs['orderBy'] }
        : { orderBy?: ManutencaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManutencaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManutencaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Manutencao model
   */
  readonly fields: ManutencaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Manutencao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManutencaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    veiculo<T extends VeiculoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VeiculoDefaultArgs<ExtArgs>>): Prisma__VeiculoClient<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Manutencao model
   */ 
  interface ManutencaoFieldRefs {
    readonly id: FieldRef<"Manutencao", 'Int'>
    readonly descricao: FieldRef<"Manutencao", 'String'>
    readonly dataManutencao: FieldRef<"Manutencao", 'DateTime'>
    readonly valorManutencao: FieldRef<"Manutencao", 'Float'>
    readonly veiculoId: FieldRef<"Manutencao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Manutencao findUnique
   */
  export type ManutencaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where: ManutencaoWhereUniqueInput
  }

  /**
   * Manutencao findUniqueOrThrow
   */
  export type ManutencaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where: ManutencaoWhereUniqueInput
  }

  /**
   * Manutencao findFirst
   */
  export type ManutencaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manutencaos.
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manutencaos.
     */
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }

  /**
   * Manutencao findFirstOrThrow
   */
  export type ManutencaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manutencaos.
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manutencaos.
     */
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }

  /**
   * Manutencao findMany
   */
  export type ManutencaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencaos to fetch.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Manutencaos.
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }

  /**
   * Manutencao create
   */
  export type ManutencaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Manutencao.
     */
    data: XOR<ManutencaoCreateInput, ManutencaoUncheckedCreateInput>
  }

  /**
   * Manutencao createMany
   */
  export type ManutencaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Manutencaos.
     */
    data: ManutencaoCreateManyInput | ManutencaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Manutencao createManyAndReturn
   */
  export type ManutencaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Manutencaos.
     */
    data: ManutencaoCreateManyInput | ManutencaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Manutencao update
   */
  export type ManutencaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Manutencao.
     */
    data: XOR<ManutencaoUpdateInput, ManutencaoUncheckedUpdateInput>
    /**
     * Choose, which Manutencao to update.
     */
    where: ManutencaoWhereUniqueInput
  }

  /**
   * Manutencao updateMany
   */
  export type ManutencaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Manutencaos.
     */
    data: XOR<ManutencaoUpdateManyMutationInput, ManutencaoUncheckedUpdateManyInput>
    /**
     * Filter which Manutencaos to update
     */
    where?: ManutencaoWhereInput
  }

  /**
   * Manutencao upsert
   */
  export type ManutencaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Manutencao to update in case it exists.
     */
    where: ManutencaoWhereUniqueInput
    /**
     * In case the Manutencao found by the `where` argument doesn't exist, create a new Manutencao with this data.
     */
    create: XOR<ManutencaoCreateInput, ManutencaoUncheckedCreateInput>
    /**
     * In case the Manutencao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManutencaoUpdateInput, ManutencaoUncheckedUpdateInput>
  }

  /**
   * Manutencao delete
   */
  export type ManutencaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter which Manutencao to delete.
     */
    where: ManutencaoWhereUniqueInput
  }

  /**
   * Manutencao deleteMany
   */
  export type ManutencaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manutencaos to delete
     */
    where?: ManutencaoWhereInput
  }

  /**
   * Manutencao without action
   */
  export type ManutencaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManutencaoInclude<ExtArgs> | null
  }


  /**
   * Model ContratoLocacao
   */

  export type AggregateContratoLocacao = {
    _count: ContratoLocacaoCountAggregateOutputType | null
    _avg: ContratoLocacaoAvgAggregateOutputType | null
    _sum: ContratoLocacaoSumAggregateOutputType | null
    _min: ContratoLocacaoMinAggregateOutputType | null
    _max: ContratoLocacaoMaxAggregateOutputType | null
  }

  export type ContratoLocacaoAvgAggregateOutputType = {
    id: number | null
    valorCaucao: number | null
    valorTotal: number | null
  }

  export type ContratoLocacaoSumAggregateOutputType = {
    id: number | null
    valorCaucao: number | null
    valorTotal: number | null
  }

  export type ContratoLocacaoMinAggregateOutputType = {
    id: number | null
    dataLocacao: Date | null
    dataDevolucao: Date | null
    valorCaucao: number | null
    valorTotal: number | null
    status: string | null
  }

  export type ContratoLocacaoMaxAggregateOutputType = {
    id: number | null
    dataLocacao: Date | null
    dataDevolucao: Date | null
    valorCaucao: number | null
    valorTotal: number | null
    status: string | null
  }

  export type ContratoLocacaoCountAggregateOutputType = {
    id: number
    dataLocacao: number
    dataDevolucao: number
    valorCaucao: number
    valorTotal: number
    status: number
    _all: number
  }


  export type ContratoLocacaoAvgAggregateInputType = {
    id?: true
    valorCaucao?: true
    valorTotal?: true
  }

  export type ContratoLocacaoSumAggregateInputType = {
    id?: true
    valorCaucao?: true
    valorTotal?: true
  }

  export type ContratoLocacaoMinAggregateInputType = {
    id?: true
    dataLocacao?: true
    dataDevolucao?: true
    valorCaucao?: true
    valorTotal?: true
    status?: true
  }

  export type ContratoLocacaoMaxAggregateInputType = {
    id?: true
    dataLocacao?: true
    dataDevolucao?: true
    valorCaucao?: true
    valorTotal?: true
    status?: true
  }

  export type ContratoLocacaoCountAggregateInputType = {
    id?: true
    dataLocacao?: true
    dataDevolucao?: true
    valorCaucao?: true
    valorTotal?: true
    status?: true
    _all?: true
  }

  export type ContratoLocacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContratoLocacao to aggregate.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContratoLocacaos
    **/
    _count?: true | ContratoLocacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContratoLocacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContratoLocacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContratoLocacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContratoLocacaoMaxAggregateInputType
  }

  export type GetContratoLocacaoAggregateType<T extends ContratoLocacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateContratoLocacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContratoLocacao[P]>
      : GetScalarType<T[P], AggregateContratoLocacao[P]>
  }




  export type ContratoLocacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContratoLocacaoWhereInput
    orderBy?: ContratoLocacaoOrderByWithAggregationInput | ContratoLocacaoOrderByWithAggregationInput[]
    by: ContratoLocacaoScalarFieldEnum[] | ContratoLocacaoScalarFieldEnum
    having?: ContratoLocacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContratoLocacaoCountAggregateInputType | true
    _avg?: ContratoLocacaoAvgAggregateInputType
    _sum?: ContratoLocacaoSumAggregateInputType
    _min?: ContratoLocacaoMinAggregateInputType
    _max?: ContratoLocacaoMaxAggregateInputType
  }

  export type ContratoLocacaoGroupByOutputType = {
    id: number
    dataLocacao: Date
    dataDevolucao: Date
    valorCaucao: number
    valorTotal: number
    status: string
    _count: ContratoLocacaoCountAggregateOutputType | null
    _avg: ContratoLocacaoAvgAggregateOutputType | null
    _sum: ContratoLocacaoSumAggregateOutputType | null
    _min: ContratoLocacaoMinAggregateOutputType | null
    _max: ContratoLocacaoMaxAggregateOutputType | null
  }

  type GetContratoLocacaoGroupByPayload<T extends ContratoLocacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContratoLocacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContratoLocacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContratoLocacaoGroupByOutputType[P]>
            : GetScalarType<T[P], ContratoLocacaoGroupByOutputType[P]>
        }
      >
    >


  export type ContratoLocacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataLocacao?: boolean
    dataDevolucao?: boolean
    valorCaucao?: boolean
    valorTotal?: boolean
    status?: boolean
    veiculos?: boolean | ContratoLocacao$veiculosArgs<ExtArgs>
    ocorrencias?: boolean | ContratoLocacao$ocorrenciasArgs<ExtArgs>
    pagamentos?: boolean | ContratoLocacao$pagamentosArgs<ExtArgs>
    _count?: boolean | ContratoLocacaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contratoLocacao"]>

  export type ContratoLocacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataLocacao?: boolean
    dataDevolucao?: boolean
    valorCaucao?: boolean
    valorTotal?: boolean
    status?: boolean
  }, ExtArgs["result"]["contratoLocacao"]>

  export type ContratoLocacaoSelectScalar = {
    id?: boolean
    dataLocacao?: boolean
    dataDevolucao?: boolean
    valorCaucao?: boolean
    valorTotal?: boolean
    status?: boolean
  }

  export type ContratoLocacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    veiculos?: boolean | ContratoLocacao$veiculosArgs<ExtArgs>
    ocorrencias?: boolean | ContratoLocacao$ocorrenciasArgs<ExtArgs>
    pagamentos?: boolean | ContratoLocacao$pagamentosArgs<ExtArgs>
    _count?: boolean | ContratoLocacaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContratoLocacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContratoLocacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContratoLocacao"
    objects: {
      veiculos: Prisma.$VeiculoPayload<ExtArgs>[]
      ocorrencias: Prisma.$OcorrenciaPayload<ExtArgs>[]
      pagamentos: Prisma.$PagamentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dataLocacao: Date
      dataDevolucao: Date
      valorCaucao: number
      valorTotal: number
      status: string
    }, ExtArgs["result"]["contratoLocacao"]>
    composites: {}
  }

  type ContratoLocacaoGetPayload<S extends boolean | null | undefined | ContratoLocacaoDefaultArgs> = $Result.GetResult<Prisma.$ContratoLocacaoPayload, S>

  type ContratoLocacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContratoLocacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContratoLocacaoCountAggregateInputType | true
    }

  export interface ContratoLocacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContratoLocacao'], meta: { name: 'ContratoLocacao' } }
    /**
     * Find zero or one ContratoLocacao that matches the filter.
     * @param {ContratoLocacaoFindUniqueArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContratoLocacaoFindUniqueArgs>(args: SelectSubset<T, ContratoLocacaoFindUniqueArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContratoLocacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContratoLocacaoFindUniqueOrThrowArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContratoLocacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, ContratoLocacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContratoLocacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoFindFirstArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContratoLocacaoFindFirstArgs>(args?: SelectSubset<T, ContratoLocacaoFindFirstArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContratoLocacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoFindFirstOrThrowArgs} args - Arguments to find a ContratoLocacao
     * @example
     * // Get one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContratoLocacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, ContratoLocacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContratoLocacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContratoLocacaos
     * const contratoLocacaos = await prisma.contratoLocacao.findMany()
     * 
     * // Get first 10 ContratoLocacaos
     * const contratoLocacaos = await prisma.contratoLocacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contratoLocacaoWithIdOnly = await prisma.contratoLocacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContratoLocacaoFindManyArgs>(args?: SelectSubset<T, ContratoLocacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContratoLocacao.
     * @param {ContratoLocacaoCreateArgs} args - Arguments to create a ContratoLocacao.
     * @example
     * // Create one ContratoLocacao
     * const ContratoLocacao = await prisma.contratoLocacao.create({
     *   data: {
     *     // ... data to create a ContratoLocacao
     *   }
     * })
     * 
     */
    create<T extends ContratoLocacaoCreateArgs>(args: SelectSubset<T, ContratoLocacaoCreateArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContratoLocacaos.
     * @param {ContratoLocacaoCreateManyArgs} args - Arguments to create many ContratoLocacaos.
     * @example
     * // Create many ContratoLocacaos
     * const contratoLocacao = await prisma.contratoLocacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContratoLocacaoCreateManyArgs>(args?: SelectSubset<T, ContratoLocacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContratoLocacaos and returns the data saved in the database.
     * @param {ContratoLocacaoCreateManyAndReturnArgs} args - Arguments to create many ContratoLocacaos.
     * @example
     * // Create many ContratoLocacaos
     * const contratoLocacao = await prisma.contratoLocacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContratoLocacaos and only return the `id`
     * const contratoLocacaoWithIdOnly = await prisma.contratoLocacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContratoLocacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, ContratoLocacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContratoLocacao.
     * @param {ContratoLocacaoDeleteArgs} args - Arguments to delete one ContratoLocacao.
     * @example
     * // Delete one ContratoLocacao
     * const ContratoLocacao = await prisma.contratoLocacao.delete({
     *   where: {
     *     // ... filter to delete one ContratoLocacao
     *   }
     * })
     * 
     */
    delete<T extends ContratoLocacaoDeleteArgs>(args: SelectSubset<T, ContratoLocacaoDeleteArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContratoLocacao.
     * @param {ContratoLocacaoUpdateArgs} args - Arguments to update one ContratoLocacao.
     * @example
     * // Update one ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContratoLocacaoUpdateArgs>(args: SelectSubset<T, ContratoLocacaoUpdateArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContratoLocacaos.
     * @param {ContratoLocacaoDeleteManyArgs} args - Arguments to filter ContratoLocacaos to delete.
     * @example
     * // Delete a few ContratoLocacaos
     * const { count } = await prisma.contratoLocacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContratoLocacaoDeleteManyArgs>(args?: SelectSubset<T, ContratoLocacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContratoLocacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContratoLocacaos
     * const contratoLocacao = await prisma.contratoLocacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContratoLocacaoUpdateManyArgs>(args: SelectSubset<T, ContratoLocacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContratoLocacao.
     * @param {ContratoLocacaoUpsertArgs} args - Arguments to update or create a ContratoLocacao.
     * @example
     * // Update or create a ContratoLocacao
     * const contratoLocacao = await prisma.contratoLocacao.upsert({
     *   create: {
     *     // ... data to create a ContratoLocacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContratoLocacao we want to update
     *   }
     * })
     */
    upsert<T extends ContratoLocacaoUpsertArgs>(args: SelectSubset<T, ContratoLocacaoUpsertArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContratoLocacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoCountArgs} args - Arguments to filter ContratoLocacaos to count.
     * @example
     * // Count the number of ContratoLocacaos
     * const count = await prisma.contratoLocacao.count({
     *   where: {
     *     // ... the filter for the ContratoLocacaos we want to count
     *   }
     * })
    **/
    count<T extends ContratoLocacaoCountArgs>(
      args?: Subset<T, ContratoLocacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContratoLocacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContratoLocacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContratoLocacaoAggregateArgs>(args: Subset<T, ContratoLocacaoAggregateArgs>): Prisma.PrismaPromise<GetContratoLocacaoAggregateType<T>>

    /**
     * Group by ContratoLocacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoLocacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContratoLocacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContratoLocacaoGroupByArgs['orderBy'] }
        : { orderBy?: ContratoLocacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContratoLocacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContratoLocacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContratoLocacao model
   */
  readonly fields: ContratoLocacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContratoLocacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContratoLocacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    veiculos<T extends ContratoLocacao$veiculosArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacao$veiculosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VeiculoPayload<ExtArgs>, T, "findMany"> | Null>
    ocorrencias<T extends ContratoLocacao$ocorrenciasArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacao$ocorrenciasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany"> | Null>
    pagamentos<T extends ContratoLocacao$pagamentosArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacao$pagamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContratoLocacao model
   */ 
  interface ContratoLocacaoFieldRefs {
    readonly id: FieldRef<"ContratoLocacao", 'Int'>
    readonly dataLocacao: FieldRef<"ContratoLocacao", 'DateTime'>
    readonly dataDevolucao: FieldRef<"ContratoLocacao", 'DateTime'>
    readonly valorCaucao: FieldRef<"ContratoLocacao", 'Float'>
    readonly valorTotal: FieldRef<"ContratoLocacao", 'Float'>
    readonly status: FieldRef<"ContratoLocacao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContratoLocacao findUnique
   */
  export type ContratoLocacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao findUniqueOrThrow
   */
  export type ContratoLocacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao findFirst
   */
  export type ContratoLocacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContratoLocacaos.
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContratoLocacaos.
     */
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao findFirstOrThrow
   */
  export type ContratoLocacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacao to fetch.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContratoLocacaos.
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContratoLocacaos.
     */
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao findMany
   */
  export type ContratoLocacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter, which ContratoLocacaos to fetch.
     */
    where?: ContratoLocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContratoLocacaos to fetch.
     */
    orderBy?: ContratoLocacaoOrderByWithRelationInput | ContratoLocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContratoLocacaos.
     */
    cursor?: ContratoLocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContratoLocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContratoLocacaos.
     */
    skip?: number
    distinct?: ContratoLocacaoScalarFieldEnum | ContratoLocacaoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao create
   */
  export type ContratoLocacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a ContratoLocacao.
     */
    data: XOR<ContratoLocacaoCreateInput, ContratoLocacaoUncheckedCreateInput>
  }

  /**
   * ContratoLocacao createMany
   */
  export type ContratoLocacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContratoLocacaos.
     */
    data: ContratoLocacaoCreateManyInput | ContratoLocacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContratoLocacao createManyAndReturn
   */
  export type ContratoLocacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContratoLocacaos.
     */
    data: ContratoLocacaoCreateManyInput | ContratoLocacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContratoLocacao update
   */
  export type ContratoLocacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a ContratoLocacao.
     */
    data: XOR<ContratoLocacaoUpdateInput, ContratoLocacaoUncheckedUpdateInput>
    /**
     * Choose, which ContratoLocacao to update.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao updateMany
   */
  export type ContratoLocacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContratoLocacaos.
     */
    data: XOR<ContratoLocacaoUpdateManyMutationInput, ContratoLocacaoUncheckedUpdateManyInput>
    /**
     * Filter which ContratoLocacaos to update
     */
    where?: ContratoLocacaoWhereInput
  }

  /**
   * ContratoLocacao upsert
   */
  export type ContratoLocacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the ContratoLocacao to update in case it exists.
     */
    where: ContratoLocacaoWhereUniqueInput
    /**
     * In case the ContratoLocacao found by the `where` argument doesn't exist, create a new ContratoLocacao with this data.
     */
    create: XOR<ContratoLocacaoCreateInput, ContratoLocacaoUncheckedCreateInput>
    /**
     * In case the ContratoLocacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContratoLocacaoUpdateInput, ContratoLocacaoUncheckedUpdateInput>
  }

  /**
   * ContratoLocacao delete
   */
  export type ContratoLocacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
    /**
     * Filter which ContratoLocacao to delete.
     */
    where: ContratoLocacaoWhereUniqueInput
  }

  /**
   * ContratoLocacao deleteMany
   */
  export type ContratoLocacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContratoLocacaos to delete
     */
    where?: ContratoLocacaoWhereInput
  }

  /**
   * ContratoLocacao.veiculos
   */
  export type ContratoLocacao$veiculosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VeiculoInclude<ExtArgs> | null
    where?: VeiculoWhereInput
    orderBy?: VeiculoOrderByWithRelationInput | VeiculoOrderByWithRelationInput[]
    cursor?: VeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VeiculoScalarFieldEnum | VeiculoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao.ocorrencias
   */
  export type ContratoLocacao$ocorrenciasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    cursor?: OcorrenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * ContratoLocacao.pagamentos
   */
  export type ContratoLocacao$pagamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    where?: PagamentoWhereInput
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    cursor?: PagamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * ContratoLocacao without action
   */
  export type ContratoLocacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoLocacao
     */
    select?: ContratoLocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContratoLocacaoInclude<ExtArgs> | null
  }


  /**
   * Model Ocorrencia
   */

  export type AggregateOcorrencia = {
    _count: OcorrenciaCountAggregateOutputType | null
    _avg: OcorrenciaAvgAggregateOutputType | null
    _sum: OcorrenciaSumAggregateOutputType | null
    _min: OcorrenciaMinAggregateOutputType | null
    _max: OcorrenciaMaxAggregateOutputType | null
  }

  export type OcorrenciaAvgAggregateOutputType = {
    id: number | null
    valorOcorrencia: number | null
    contratoId: number | null
  }

  export type OcorrenciaSumAggregateOutputType = {
    id: number | null
    valorOcorrencia: number | null
    contratoId: number | null
  }

  export type OcorrenciaMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    dataOcorrencia: Date | null
    valorOcorrencia: number | null
    contratoId: number | null
  }

  export type OcorrenciaMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    dataOcorrencia: Date | null
    valorOcorrencia: number | null
    contratoId: number | null
  }

  export type OcorrenciaCountAggregateOutputType = {
    id: number
    descricao: number
    dataOcorrencia: number
    valorOcorrencia: number
    contratoId: number
    _all: number
  }


  export type OcorrenciaAvgAggregateInputType = {
    id?: true
    valorOcorrencia?: true
    contratoId?: true
  }

  export type OcorrenciaSumAggregateInputType = {
    id?: true
    valorOcorrencia?: true
    contratoId?: true
  }

  export type OcorrenciaMinAggregateInputType = {
    id?: true
    descricao?: true
    dataOcorrencia?: true
    valorOcorrencia?: true
    contratoId?: true
  }

  export type OcorrenciaMaxAggregateInputType = {
    id?: true
    descricao?: true
    dataOcorrencia?: true
    valorOcorrencia?: true
    contratoId?: true
  }

  export type OcorrenciaCountAggregateInputType = {
    id?: true
    descricao?: true
    dataOcorrencia?: true
    valorOcorrencia?: true
    contratoId?: true
    _all?: true
  }

  export type OcorrenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ocorrencia to aggregate.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ocorrencias
    **/
    _count?: true | OcorrenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OcorrenciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OcorrenciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OcorrenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OcorrenciaMaxAggregateInputType
  }

  export type GetOcorrenciaAggregateType<T extends OcorrenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateOcorrencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOcorrencia[P]>
      : GetScalarType<T[P], AggregateOcorrencia[P]>
  }




  export type OcorrenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OcorrenciaWhereInput
    orderBy?: OcorrenciaOrderByWithAggregationInput | OcorrenciaOrderByWithAggregationInput[]
    by: OcorrenciaScalarFieldEnum[] | OcorrenciaScalarFieldEnum
    having?: OcorrenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OcorrenciaCountAggregateInputType | true
    _avg?: OcorrenciaAvgAggregateInputType
    _sum?: OcorrenciaSumAggregateInputType
    _min?: OcorrenciaMinAggregateInputType
    _max?: OcorrenciaMaxAggregateInputType
  }

  export type OcorrenciaGroupByOutputType = {
    id: number
    descricao: string
    dataOcorrencia: Date
    valorOcorrencia: number
    contratoId: number
    _count: OcorrenciaCountAggregateOutputType | null
    _avg: OcorrenciaAvgAggregateOutputType | null
    _sum: OcorrenciaSumAggregateOutputType | null
    _min: OcorrenciaMinAggregateOutputType | null
    _max: OcorrenciaMaxAggregateOutputType | null
  }

  type GetOcorrenciaGroupByPayload<T extends OcorrenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OcorrenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OcorrenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OcorrenciaGroupByOutputType[P]>
            : GetScalarType<T[P], OcorrenciaGroupByOutputType[P]>
        }
      >
    >


  export type OcorrenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    dataOcorrencia?: boolean
    valorOcorrencia?: boolean
    contratoId?: boolean
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    dataOcorrencia?: boolean
    valorOcorrencia?: boolean
    contratoId?: boolean
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ocorrencia"]>

  export type OcorrenciaSelectScalar = {
    id?: boolean
    descricao?: boolean
    dataOcorrencia?: boolean
    valorOcorrencia?: boolean
    contratoId?: boolean
  }

  export type OcorrenciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }
  export type OcorrenciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }

  export type $OcorrenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ocorrencia"
    objects: {
      contrato: Prisma.$ContratoLocacaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      dataOcorrencia: Date
      valorOcorrencia: number
      contratoId: number
    }, ExtArgs["result"]["ocorrencia"]>
    composites: {}
  }

  type OcorrenciaGetPayload<S extends boolean | null | undefined | OcorrenciaDefaultArgs> = $Result.GetResult<Prisma.$OcorrenciaPayload, S>

  type OcorrenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OcorrenciaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OcorrenciaCountAggregateInputType | true
    }

  export interface OcorrenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ocorrencia'], meta: { name: 'Ocorrencia' } }
    /**
     * Find zero or one Ocorrencia that matches the filter.
     * @param {OcorrenciaFindUniqueArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OcorrenciaFindUniqueArgs>(args: SelectSubset<T, OcorrenciaFindUniqueArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ocorrencia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OcorrenciaFindUniqueOrThrowArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OcorrenciaFindUniqueOrThrowArgs>(args: SelectSubset<T, OcorrenciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ocorrencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindFirstArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OcorrenciaFindFirstArgs>(args?: SelectSubset<T, OcorrenciaFindFirstArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ocorrencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindFirstOrThrowArgs} args - Arguments to find a Ocorrencia
     * @example
     * // Get one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OcorrenciaFindFirstOrThrowArgs>(args?: SelectSubset<T, OcorrenciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ocorrencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ocorrencias
     * const ocorrencias = await prisma.ocorrencia.findMany()
     * 
     * // Get first 10 Ocorrencias
     * const ocorrencias = await prisma.ocorrencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OcorrenciaFindManyArgs>(args?: SelectSubset<T, OcorrenciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ocorrencia.
     * @param {OcorrenciaCreateArgs} args - Arguments to create a Ocorrencia.
     * @example
     * // Create one Ocorrencia
     * const Ocorrencia = await prisma.ocorrencia.create({
     *   data: {
     *     // ... data to create a Ocorrencia
     *   }
     * })
     * 
     */
    create<T extends OcorrenciaCreateArgs>(args: SelectSubset<T, OcorrenciaCreateArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ocorrencias.
     * @param {OcorrenciaCreateManyArgs} args - Arguments to create many Ocorrencias.
     * @example
     * // Create many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OcorrenciaCreateManyArgs>(args?: SelectSubset<T, OcorrenciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ocorrencias and returns the data saved in the database.
     * @param {OcorrenciaCreateManyAndReturnArgs} args - Arguments to create many Ocorrencias.
     * @example
     * // Create many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ocorrencias and only return the `id`
     * const ocorrenciaWithIdOnly = await prisma.ocorrencia.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OcorrenciaCreateManyAndReturnArgs>(args?: SelectSubset<T, OcorrenciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ocorrencia.
     * @param {OcorrenciaDeleteArgs} args - Arguments to delete one Ocorrencia.
     * @example
     * // Delete one Ocorrencia
     * const Ocorrencia = await prisma.ocorrencia.delete({
     *   where: {
     *     // ... filter to delete one Ocorrencia
     *   }
     * })
     * 
     */
    delete<T extends OcorrenciaDeleteArgs>(args: SelectSubset<T, OcorrenciaDeleteArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ocorrencia.
     * @param {OcorrenciaUpdateArgs} args - Arguments to update one Ocorrencia.
     * @example
     * // Update one Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OcorrenciaUpdateArgs>(args: SelectSubset<T, OcorrenciaUpdateArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ocorrencias.
     * @param {OcorrenciaDeleteManyArgs} args - Arguments to filter Ocorrencias to delete.
     * @example
     * // Delete a few Ocorrencias
     * const { count } = await prisma.ocorrencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OcorrenciaDeleteManyArgs>(args?: SelectSubset<T, OcorrenciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ocorrencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ocorrencias
     * const ocorrencia = await prisma.ocorrencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OcorrenciaUpdateManyArgs>(args: SelectSubset<T, OcorrenciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ocorrencia.
     * @param {OcorrenciaUpsertArgs} args - Arguments to update or create a Ocorrencia.
     * @example
     * // Update or create a Ocorrencia
     * const ocorrencia = await prisma.ocorrencia.upsert({
     *   create: {
     *     // ... data to create a Ocorrencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ocorrencia we want to update
     *   }
     * })
     */
    upsert<T extends OcorrenciaUpsertArgs>(args: SelectSubset<T, OcorrenciaUpsertArgs<ExtArgs>>): Prisma__OcorrenciaClient<$Result.GetResult<Prisma.$OcorrenciaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ocorrencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaCountArgs} args - Arguments to filter Ocorrencias to count.
     * @example
     * // Count the number of Ocorrencias
     * const count = await prisma.ocorrencia.count({
     *   where: {
     *     // ... the filter for the Ocorrencias we want to count
     *   }
     * })
    **/
    count<T extends OcorrenciaCountArgs>(
      args?: Subset<T, OcorrenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OcorrenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ocorrencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OcorrenciaAggregateArgs>(args: Subset<T, OcorrenciaAggregateArgs>): Prisma.PrismaPromise<GetOcorrenciaAggregateType<T>>

    /**
     * Group by Ocorrencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OcorrenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OcorrenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OcorrenciaGroupByArgs['orderBy'] }
        : { orderBy?: OcorrenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OcorrenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOcorrenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ocorrencia model
   */
  readonly fields: OcorrenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ocorrencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OcorrenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contrato<T extends ContratoLocacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacaoDefaultArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ocorrencia model
   */ 
  interface OcorrenciaFieldRefs {
    readonly id: FieldRef<"Ocorrencia", 'Int'>
    readonly descricao: FieldRef<"Ocorrencia", 'String'>
    readonly dataOcorrencia: FieldRef<"Ocorrencia", 'DateTime'>
    readonly valorOcorrencia: FieldRef<"Ocorrencia", 'Float'>
    readonly contratoId: FieldRef<"Ocorrencia", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ocorrencia findUnique
   */
  export type OcorrenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia findUniqueOrThrow
   */
  export type OcorrenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia findFirst
   */
  export type OcorrenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ocorrencias.
     */
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia findFirstOrThrow
   */
  export type OcorrenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencia to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ocorrencias.
     */
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia findMany
   */
  export type OcorrenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter, which Ocorrencias to fetch.
     */
    where?: OcorrenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ocorrencias to fetch.
     */
    orderBy?: OcorrenciaOrderByWithRelationInput | OcorrenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ocorrencias.
     */
    cursor?: OcorrenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ocorrencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ocorrencias.
     */
    skip?: number
    distinct?: OcorrenciaScalarFieldEnum | OcorrenciaScalarFieldEnum[]
  }

  /**
   * Ocorrencia create
   */
  export type OcorrenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Ocorrencia.
     */
    data: XOR<OcorrenciaCreateInput, OcorrenciaUncheckedCreateInput>
  }

  /**
   * Ocorrencia createMany
   */
  export type OcorrenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ocorrencias.
     */
    data: OcorrenciaCreateManyInput | OcorrenciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ocorrencia createManyAndReturn
   */
  export type OcorrenciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ocorrencias.
     */
    data: OcorrenciaCreateManyInput | OcorrenciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ocorrencia update
   */
  export type OcorrenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Ocorrencia.
     */
    data: XOR<OcorrenciaUpdateInput, OcorrenciaUncheckedUpdateInput>
    /**
     * Choose, which Ocorrencia to update.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia updateMany
   */
  export type OcorrenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ocorrencias.
     */
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyInput>
    /**
     * Filter which Ocorrencias to update
     */
    where?: OcorrenciaWhereInput
  }

  /**
   * Ocorrencia upsert
   */
  export type OcorrenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Ocorrencia to update in case it exists.
     */
    where: OcorrenciaWhereUniqueInput
    /**
     * In case the Ocorrencia found by the `where` argument doesn't exist, create a new Ocorrencia with this data.
     */
    create: XOR<OcorrenciaCreateInput, OcorrenciaUncheckedCreateInput>
    /**
     * In case the Ocorrencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OcorrenciaUpdateInput, OcorrenciaUncheckedUpdateInput>
  }

  /**
   * Ocorrencia delete
   */
  export type OcorrenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
    /**
     * Filter which Ocorrencia to delete.
     */
    where: OcorrenciaWhereUniqueInput
  }

  /**
   * Ocorrencia deleteMany
   */
  export type OcorrenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ocorrencias to delete
     */
    where?: OcorrenciaWhereInput
  }

  /**
   * Ocorrencia without action
   */
  export type OcorrenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ocorrencia
     */
    select?: OcorrenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OcorrenciaInclude<ExtArgs> | null
  }


  /**
   * Model Pagamento
   */

  export type AggregatePagamento = {
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  export type PagamentoAvgAggregateOutputType = {
    id: number | null
    valorPago: number | null
    contratoId: number | null
  }

  export type PagamentoSumAggregateOutputType = {
    id: number | null
    valorPago: number | null
    contratoId: number | null
  }

  export type PagamentoMinAggregateOutputType = {
    id: number | null
    data: Date | null
    valorPago: number | null
    formaPagamento: string | null
    contratoId: number | null
  }

  export type PagamentoMaxAggregateOutputType = {
    id: number | null
    data: Date | null
    valorPago: number | null
    formaPagamento: string | null
    contratoId: number | null
  }

  export type PagamentoCountAggregateOutputType = {
    id: number
    data: number
    valorPago: number
    formaPagamento: number
    contratoId: number
    _all: number
  }


  export type PagamentoAvgAggregateInputType = {
    id?: true
    valorPago?: true
    contratoId?: true
  }

  export type PagamentoSumAggregateInputType = {
    id?: true
    valorPago?: true
    contratoId?: true
  }

  export type PagamentoMinAggregateInputType = {
    id?: true
    data?: true
    valorPago?: true
    formaPagamento?: true
    contratoId?: true
  }

  export type PagamentoMaxAggregateInputType = {
    id?: true
    data?: true
    valorPago?: true
    formaPagamento?: true
    contratoId?: true
  }

  export type PagamentoCountAggregateInputType = {
    id?: true
    data?: true
    valorPago?: true
    formaPagamento?: true
    contratoId?: true
    _all?: true
  }

  export type PagamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagamento to aggregate.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pagamentos
    **/
    _count?: true | PagamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagamentoMaxAggregateInputType
  }

  export type GetPagamentoAggregateType<T extends PagamentoAggregateArgs> = {
        [P in keyof T & keyof AggregatePagamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagamento[P]>
      : GetScalarType<T[P], AggregatePagamento[P]>
  }




  export type PagamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagamentoWhereInput
    orderBy?: PagamentoOrderByWithAggregationInput | PagamentoOrderByWithAggregationInput[]
    by: PagamentoScalarFieldEnum[] | PagamentoScalarFieldEnum
    having?: PagamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagamentoCountAggregateInputType | true
    _avg?: PagamentoAvgAggregateInputType
    _sum?: PagamentoSumAggregateInputType
    _min?: PagamentoMinAggregateInputType
    _max?: PagamentoMaxAggregateInputType
  }

  export type PagamentoGroupByOutputType = {
    id: number
    data: Date
    valorPago: number
    formaPagamento: string
    contratoId: number
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  type GetPagamentoGroupByPayload<T extends PagamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
            : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
        }
      >
    >


  export type PagamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    contratoId?: boolean
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagamento"]>

  export type PagamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    contratoId?: boolean
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagamento"]>

  export type PagamentoSelectScalar = {
    id?: boolean
    data?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    contratoId?: boolean
  }

  export type PagamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }
  export type PagamentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoLocacaoDefaultArgs<ExtArgs>
  }

  export type $PagamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pagamento"
    objects: {
      contrato: Prisma.$ContratoLocacaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data: Date
      valorPago: number
      formaPagamento: string
      contratoId: number
    }, ExtArgs["result"]["pagamento"]>
    composites: {}
  }

  type PagamentoGetPayload<S extends boolean | null | undefined | PagamentoDefaultArgs> = $Result.GetResult<Prisma.$PagamentoPayload, S>

  type PagamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PagamentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PagamentoCountAggregateInputType | true
    }

  export interface PagamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pagamento'], meta: { name: 'Pagamento' } }
    /**
     * Find zero or one Pagamento that matches the filter.
     * @param {PagamentoFindUniqueArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PagamentoFindUniqueArgs>(args: SelectSubset<T, PagamentoFindUniqueArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pagamento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PagamentoFindUniqueOrThrowArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PagamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, PagamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pagamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindFirstArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PagamentoFindFirstArgs>(args?: SelectSubset<T, PagamentoFindFirstArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pagamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindFirstOrThrowArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PagamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, PagamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagamentos
     * const pagamentos = await prisma.pagamento.findMany()
     * 
     * // Get first 10 Pagamentos
     * const pagamentos = await prisma.pagamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagamentoWithIdOnly = await prisma.pagamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PagamentoFindManyArgs>(args?: SelectSubset<T, PagamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pagamento.
     * @param {PagamentoCreateArgs} args - Arguments to create a Pagamento.
     * @example
     * // Create one Pagamento
     * const Pagamento = await prisma.pagamento.create({
     *   data: {
     *     // ... data to create a Pagamento
     *   }
     * })
     * 
     */
    create<T extends PagamentoCreateArgs>(args: SelectSubset<T, PagamentoCreateArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pagamentos.
     * @param {PagamentoCreateManyArgs} args - Arguments to create many Pagamentos.
     * @example
     * // Create many Pagamentos
     * const pagamento = await prisma.pagamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PagamentoCreateManyArgs>(args?: SelectSubset<T, PagamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pagamentos and returns the data saved in the database.
     * @param {PagamentoCreateManyAndReturnArgs} args - Arguments to create many Pagamentos.
     * @example
     * // Create many Pagamentos
     * const pagamento = await prisma.pagamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pagamentos and only return the `id`
     * const pagamentoWithIdOnly = await prisma.pagamento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PagamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, PagamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pagamento.
     * @param {PagamentoDeleteArgs} args - Arguments to delete one Pagamento.
     * @example
     * // Delete one Pagamento
     * const Pagamento = await prisma.pagamento.delete({
     *   where: {
     *     // ... filter to delete one Pagamento
     *   }
     * })
     * 
     */
    delete<T extends PagamentoDeleteArgs>(args: SelectSubset<T, PagamentoDeleteArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pagamento.
     * @param {PagamentoUpdateArgs} args - Arguments to update one Pagamento.
     * @example
     * // Update one Pagamento
     * const pagamento = await prisma.pagamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PagamentoUpdateArgs>(args: SelectSubset<T, PagamentoUpdateArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pagamentos.
     * @param {PagamentoDeleteManyArgs} args - Arguments to filter Pagamentos to delete.
     * @example
     * // Delete a few Pagamentos
     * const { count } = await prisma.pagamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PagamentoDeleteManyArgs>(args?: SelectSubset<T, PagamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagamentos
     * const pagamento = await prisma.pagamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PagamentoUpdateManyArgs>(args: SelectSubset<T, PagamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagamento.
     * @param {PagamentoUpsertArgs} args - Arguments to update or create a Pagamento.
     * @example
     * // Update or create a Pagamento
     * const pagamento = await prisma.pagamento.upsert({
     *   create: {
     *     // ... data to create a Pagamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagamento we want to update
     *   }
     * })
     */
    upsert<T extends PagamentoUpsertArgs>(args: SelectSubset<T, PagamentoUpsertArgs<ExtArgs>>): Prisma__PagamentoClient<$Result.GetResult<Prisma.$PagamentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoCountArgs} args - Arguments to filter Pagamentos to count.
     * @example
     * // Count the number of Pagamentos
     * const count = await prisma.pagamento.count({
     *   where: {
     *     // ... the filter for the Pagamentos we want to count
     *   }
     * })
    **/
    count<T extends PagamentoCountArgs>(
      args?: Subset<T, PagamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagamentoAggregateArgs>(args: Subset<T, PagamentoAggregateArgs>): Prisma.PrismaPromise<GetPagamentoAggregateType<T>>

    /**
     * Group by Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagamentoGroupByArgs['orderBy'] }
        : { orderBy?: PagamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pagamento model
   */
  readonly fields: PagamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pagamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PagamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contrato<T extends ContratoLocacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContratoLocacaoDefaultArgs<ExtArgs>>): Prisma__ContratoLocacaoClient<$Result.GetResult<Prisma.$ContratoLocacaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pagamento model
   */ 
  interface PagamentoFieldRefs {
    readonly id: FieldRef<"Pagamento", 'Int'>
    readonly data: FieldRef<"Pagamento", 'DateTime'>
    readonly valorPago: FieldRef<"Pagamento", 'Float'>
    readonly formaPagamento: FieldRef<"Pagamento", 'String'>
    readonly contratoId: FieldRef<"Pagamento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pagamento findUnique
   */
  export type PagamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento findUniqueOrThrow
   */
  export type PagamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento findFirst
   */
  export type PagamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Pagamento findFirstOrThrow
   */
  export type PagamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Pagamento findMany
   */
  export type PagamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: PagamentoOrderByWithRelationInput | PagamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    distinct?: PagamentoScalarFieldEnum | PagamentoScalarFieldEnum[]
  }

  /**
   * Pagamento create
   */
  export type PagamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pagamento.
     */
    data: XOR<PagamentoCreateInput, PagamentoUncheckedCreateInput>
  }

  /**
   * Pagamento createMany
   */
  export type PagamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pagamentos.
     */
    data: PagamentoCreateManyInput | PagamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pagamento createManyAndReturn
   */
  export type PagamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Pagamentos.
     */
    data: PagamentoCreateManyInput | PagamentoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pagamento update
   */
  export type PagamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pagamento.
     */
    data: XOR<PagamentoUpdateInput, PagamentoUncheckedUpdateInput>
    /**
     * Choose, which Pagamento to update.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento updateMany
   */
  export type PagamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pagamentos.
     */
    data: XOR<PagamentoUpdateManyMutationInput, PagamentoUncheckedUpdateManyInput>
    /**
     * Filter which Pagamentos to update
     */
    where?: PagamentoWhereInput
  }

  /**
   * Pagamento upsert
   */
  export type PagamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pagamento to update in case it exists.
     */
    where: PagamentoWhereUniqueInput
    /**
     * In case the Pagamento found by the `where` argument doesn't exist, create a new Pagamento with this data.
     */
    create: XOR<PagamentoCreateInput, PagamentoUncheckedCreateInput>
    /**
     * In case the Pagamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagamentoUpdateInput, PagamentoUncheckedUpdateInput>
  }

  /**
   * Pagamento delete
   */
  export type PagamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter which Pagamento to delete.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento deleteMany
   */
  export type PagamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagamentos to delete
     */
    where?: PagamentoWhereInput
  }

  /**
   * Pagamento without action
   */
  export type PagamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagamentoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    valorLocacao: 'valorLocacao'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const MarcaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type MarcaScalarFieldEnum = (typeof MarcaScalarFieldEnum)[keyof typeof MarcaScalarFieldEnum]


  export const ModeloScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    anoModelo: 'anoModelo',
    qtModelo: 'qtModelo',
    categoriaId: 'categoriaId',
    marcaId: 'marcaId'
  };

  export type ModeloScalarFieldEnum = (typeof ModeloScalarFieldEnum)[keyof typeof ModeloScalarFieldEnum]


  export const VeiculoScalarFieldEnum: {
    id: 'id',
    placa: 'placa',
    chassi: 'chassi',
    anoFabricacao: 'anoFabricacao',
    cor: 'cor',
    status: 'status',
    modeloId: 'modeloId'
  };

  export type VeiculoScalarFieldEnum = (typeof VeiculoScalarFieldEnum)[keyof typeof VeiculoScalarFieldEnum]


  export const ManutencaoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    dataManutencao: 'dataManutencao',
    valorManutencao: 'valorManutencao',
    veiculoId: 'veiculoId'
  };

  export type ManutencaoScalarFieldEnum = (typeof ManutencaoScalarFieldEnum)[keyof typeof ManutencaoScalarFieldEnum]


  export const ContratoLocacaoScalarFieldEnum: {
    id: 'id',
    dataLocacao: 'dataLocacao',
    dataDevolucao: 'dataDevolucao',
    valorCaucao: 'valorCaucao',
    valorTotal: 'valorTotal',
    status: 'status'
  };

  export type ContratoLocacaoScalarFieldEnum = (typeof ContratoLocacaoScalarFieldEnum)[keyof typeof ContratoLocacaoScalarFieldEnum]


  export const OcorrenciaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    dataOcorrencia: 'dataOcorrencia',
    valorOcorrencia: 'valorOcorrencia',
    contratoId: 'contratoId'
  };

  export type OcorrenciaScalarFieldEnum = (typeof OcorrenciaScalarFieldEnum)[keyof typeof OcorrenciaScalarFieldEnum]


  export const PagamentoScalarFieldEnum: {
    id: 'id',
    data: 'data',
    valorPago: 'valorPago',
    formaPagamento: 'formaPagamento',
    contratoId: 'contratoId'
  };

  export type PagamentoScalarFieldEnum = (typeof PagamentoScalarFieldEnum)[keyof typeof PagamentoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: IntFilter<"Categoria"> | number
    tipo?: StringFilter<"Categoria"> | string
    valorLocacao?: FloatFilter<"Categoria"> | number
    modelos?: ModeloListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    valorLocacao?: SortOrder
    modelos?: ModeloOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    tipo?: StringFilter<"Categoria"> | string
    valorLocacao?: FloatFilter<"Categoria"> | number
    modelos?: ModeloListRelationFilter
  }, "id">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    valorLocacao?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categoria"> | number
    tipo?: StringWithAggregatesFilter<"Categoria"> | string
    valorLocacao?: FloatWithAggregatesFilter<"Categoria"> | number
  }

  export type MarcaWhereInput = {
    AND?: MarcaWhereInput | MarcaWhereInput[]
    OR?: MarcaWhereInput[]
    NOT?: MarcaWhereInput | MarcaWhereInput[]
    id?: IntFilter<"Marca"> | number
    nome?: StringFilter<"Marca"> | string
    modelos?: ModeloListRelationFilter
  }

  export type MarcaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    modelos?: ModeloOrderByRelationAggregateInput
  }

  export type MarcaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MarcaWhereInput | MarcaWhereInput[]
    OR?: MarcaWhereInput[]
    NOT?: MarcaWhereInput | MarcaWhereInput[]
    nome?: StringFilter<"Marca"> | string
    modelos?: ModeloListRelationFilter
  }, "id">

  export type MarcaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: MarcaCountOrderByAggregateInput
    _avg?: MarcaAvgOrderByAggregateInput
    _max?: MarcaMaxOrderByAggregateInput
    _min?: MarcaMinOrderByAggregateInput
    _sum?: MarcaSumOrderByAggregateInput
  }

  export type MarcaScalarWhereWithAggregatesInput = {
    AND?: MarcaScalarWhereWithAggregatesInput | MarcaScalarWhereWithAggregatesInput[]
    OR?: MarcaScalarWhereWithAggregatesInput[]
    NOT?: MarcaScalarWhereWithAggregatesInput | MarcaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Marca"> | number
    nome?: StringWithAggregatesFilter<"Marca"> | string
  }

  export type ModeloWhereInput = {
    AND?: ModeloWhereInput | ModeloWhereInput[]
    OR?: ModeloWhereInput[]
    NOT?: ModeloWhereInput | ModeloWhereInput[]
    id?: IntFilter<"Modelo"> | number
    nome?: StringFilter<"Modelo"> | string
    anoModelo?: DateTimeFilter<"Modelo"> | Date | string
    qtModelo?: IntFilter<"Modelo"> | number
    categoriaId?: IntFilter<"Modelo"> | number
    marcaId?: IntFilter<"Modelo"> | number
    categoria?: XOR<CategoriaScalarRelationFilter, CategoriaWhereInput>
    marca?: XOR<MarcaScalarRelationFilter, MarcaWhereInput>
    veiculos?: VeiculoListRelationFilter
  }

  export type ModeloOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    anoModelo?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
    categoria?: CategoriaOrderByWithRelationInput
    marca?: MarcaOrderByWithRelationInput
    veiculos?: VeiculoOrderByRelationAggregateInput
  }

  export type ModeloWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ModeloWhereInput | ModeloWhereInput[]
    OR?: ModeloWhereInput[]
    NOT?: ModeloWhereInput | ModeloWhereInput[]
    nome?: StringFilter<"Modelo"> | string
    anoModelo?: DateTimeFilter<"Modelo"> | Date | string
    qtModelo?: IntFilter<"Modelo"> | number
    categoriaId?: IntFilter<"Modelo"> | number
    marcaId?: IntFilter<"Modelo"> | number
    categoria?: XOR<CategoriaScalarRelationFilter, CategoriaWhereInput>
    marca?: XOR<MarcaScalarRelationFilter, MarcaWhereInput>
    veiculos?: VeiculoListRelationFilter
  }, "id">

  export type ModeloOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    anoModelo?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
    _count?: ModeloCountOrderByAggregateInput
    _avg?: ModeloAvgOrderByAggregateInput
    _max?: ModeloMaxOrderByAggregateInput
    _min?: ModeloMinOrderByAggregateInput
    _sum?: ModeloSumOrderByAggregateInput
  }

  export type ModeloScalarWhereWithAggregatesInput = {
    AND?: ModeloScalarWhereWithAggregatesInput | ModeloScalarWhereWithAggregatesInput[]
    OR?: ModeloScalarWhereWithAggregatesInput[]
    NOT?: ModeloScalarWhereWithAggregatesInput | ModeloScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Modelo"> | number
    nome?: StringWithAggregatesFilter<"Modelo"> | string
    anoModelo?: DateTimeWithAggregatesFilter<"Modelo"> | Date | string
    qtModelo?: IntWithAggregatesFilter<"Modelo"> | number
    categoriaId?: IntWithAggregatesFilter<"Modelo"> | number
    marcaId?: IntWithAggregatesFilter<"Modelo"> | number
  }

  export type VeiculoWhereInput = {
    AND?: VeiculoWhereInput | VeiculoWhereInput[]
    OR?: VeiculoWhereInput[]
    NOT?: VeiculoWhereInput | VeiculoWhereInput[]
    id?: IntFilter<"Veiculo"> | number
    placa?: StringFilter<"Veiculo"> | string
    chassi?: StringFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeFilter<"Veiculo"> | Date | string
    cor?: StringFilter<"Veiculo"> | string
    status?: StringFilter<"Veiculo"> | string
    modeloId?: IntFilter<"Veiculo"> | number
    modelo?: XOR<ModeloScalarRelationFilter, ModeloWhereInput>
    manutencoes?: ManutencaoListRelationFilter
    contratos?: ContratoLocacaoListRelationFilter
  }

  export type VeiculoOrderByWithRelationInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    modeloId?: SortOrder
    modelo?: ModeloOrderByWithRelationInput
    manutencoes?: ManutencaoOrderByRelationAggregateInput
    contratos?: ContratoLocacaoOrderByRelationAggregateInput
  }

  export type VeiculoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VeiculoWhereInput | VeiculoWhereInput[]
    OR?: VeiculoWhereInput[]
    NOT?: VeiculoWhereInput | VeiculoWhereInput[]
    placa?: StringFilter<"Veiculo"> | string
    chassi?: StringFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeFilter<"Veiculo"> | Date | string
    cor?: StringFilter<"Veiculo"> | string
    status?: StringFilter<"Veiculo"> | string
    modeloId?: IntFilter<"Veiculo"> | number
    modelo?: XOR<ModeloScalarRelationFilter, ModeloWhereInput>
    manutencoes?: ManutencaoListRelationFilter
    contratos?: ContratoLocacaoListRelationFilter
  }, "id">

  export type VeiculoOrderByWithAggregationInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    modeloId?: SortOrder
    _count?: VeiculoCountOrderByAggregateInput
    _avg?: VeiculoAvgOrderByAggregateInput
    _max?: VeiculoMaxOrderByAggregateInput
    _min?: VeiculoMinOrderByAggregateInput
    _sum?: VeiculoSumOrderByAggregateInput
  }

  export type VeiculoScalarWhereWithAggregatesInput = {
    AND?: VeiculoScalarWhereWithAggregatesInput | VeiculoScalarWhereWithAggregatesInput[]
    OR?: VeiculoScalarWhereWithAggregatesInput[]
    NOT?: VeiculoScalarWhereWithAggregatesInput | VeiculoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Veiculo"> | number
    placa?: StringWithAggregatesFilter<"Veiculo"> | string
    chassi?: StringWithAggregatesFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeWithAggregatesFilter<"Veiculo"> | Date | string
    cor?: StringWithAggregatesFilter<"Veiculo"> | string
    status?: StringWithAggregatesFilter<"Veiculo"> | string
    modeloId?: IntWithAggregatesFilter<"Veiculo"> | number
  }

  export type ManutencaoWhereInput = {
    AND?: ManutencaoWhereInput | ManutencaoWhereInput[]
    OR?: ManutencaoWhereInput[]
    NOT?: ManutencaoWhereInput | ManutencaoWhereInput[]
    id?: IntFilter<"Manutencao"> | number
    descricao?: StringFilter<"Manutencao"> | string
    dataManutencao?: DateTimeFilter<"Manutencao"> | Date | string
    valorManutencao?: FloatFilter<"Manutencao"> | number
    veiculoId?: IntFilter<"Manutencao"> | number
    veiculo?: XOR<VeiculoScalarRelationFilter, VeiculoWhereInput>
  }

  export type ManutencaoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataManutencao?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
    veiculo?: VeiculoOrderByWithRelationInput
  }

  export type ManutencaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ManutencaoWhereInput | ManutencaoWhereInput[]
    OR?: ManutencaoWhereInput[]
    NOT?: ManutencaoWhereInput | ManutencaoWhereInput[]
    descricao?: StringFilter<"Manutencao"> | string
    dataManutencao?: DateTimeFilter<"Manutencao"> | Date | string
    valorManutencao?: FloatFilter<"Manutencao"> | number
    veiculoId?: IntFilter<"Manutencao"> | number
    veiculo?: XOR<VeiculoScalarRelationFilter, VeiculoWhereInput>
  }, "id">

  export type ManutencaoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataManutencao?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
    _count?: ManutencaoCountOrderByAggregateInput
    _avg?: ManutencaoAvgOrderByAggregateInput
    _max?: ManutencaoMaxOrderByAggregateInput
    _min?: ManutencaoMinOrderByAggregateInput
    _sum?: ManutencaoSumOrderByAggregateInput
  }

  export type ManutencaoScalarWhereWithAggregatesInput = {
    AND?: ManutencaoScalarWhereWithAggregatesInput | ManutencaoScalarWhereWithAggregatesInput[]
    OR?: ManutencaoScalarWhereWithAggregatesInput[]
    NOT?: ManutencaoScalarWhereWithAggregatesInput | ManutencaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Manutencao"> | number
    descricao?: StringWithAggregatesFilter<"Manutencao"> | string
    dataManutencao?: DateTimeWithAggregatesFilter<"Manutencao"> | Date | string
    valorManutencao?: FloatWithAggregatesFilter<"Manutencao"> | number
    veiculoId?: IntWithAggregatesFilter<"Manutencao"> | number
  }

  export type ContratoLocacaoWhereInput = {
    AND?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    OR?: ContratoLocacaoWhereInput[]
    NOT?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    id?: IntFilter<"ContratoLocacao"> | number
    dataLocacao?: DateTimeFilter<"ContratoLocacao"> | Date | string
    dataDevolucao?: DateTimeFilter<"ContratoLocacao"> | Date | string
    valorCaucao?: FloatFilter<"ContratoLocacao"> | number
    valorTotal?: FloatFilter<"ContratoLocacao"> | number
    status?: StringFilter<"ContratoLocacao"> | string
    veiculos?: VeiculoListRelationFilter
    ocorrencias?: OcorrenciaListRelationFilter
    pagamentos?: PagamentoListRelationFilter
  }

  export type ContratoLocacaoOrderByWithRelationInput = {
    id?: SortOrder
    dataLocacao?: SortOrder
    dataDevolucao?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
    status?: SortOrder
    veiculos?: VeiculoOrderByRelationAggregateInput
    ocorrencias?: OcorrenciaOrderByRelationAggregateInput
    pagamentos?: PagamentoOrderByRelationAggregateInput
  }

  export type ContratoLocacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    OR?: ContratoLocacaoWhereInput[]
    NOT?: ContratoLocacaoWhereInput | ContratoLocacaoWhereInput[]
    dataLocacao?: DateTimeFilter<"ContratoLocacao"> | Date | string
    dataDevolucao?: DateTimeFilter<"ContratoLocacao"> | Date | string
    valorCaucao?: FloatFilter<"ContratoLocacao"> | number
    valorTotal?: FloatFilter<"ContratoLocacao"> | number
    status?: StringFilter<"ContratoLocacao"> | string
    veiculos?: VeiculoListRelationFilter
    ocorrencias?: OcorrenciaListRelationFilter
    pagamentos?: PagamentoListRelationFilter
  }, "id">

  export type ContratoLocacaoOrderByWithAggregationInput = {
    id?: SortOrder
    dataLocacao?: SortOrder
    dataDevolucao?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
    status?: SortOrder
    _count?: ContratoLocacaoCountOrderByAggregateInput
    _avg?: ContratoLocacaoAvgOrderByAggregateInput
    _max?: ContratoLocacaoMaxOrderByAggregateInput
    _min?: ContratoLocacaoMinOrderByAggregateInput
    _sum?: ContratoLocacaoSumOrderByAggregateInput
  }

  export type ContratoLocacaoScalarWhereWithAggregatesInput = {
    AND?: ContratoLocacaoScalarWhereWithAggregatesInput | ContratoLocacaoScalarWhereWithAggregatesInput[]
    OR?: ContratoLocacaoScalarWhereWithAggregatesInput[]
    NOT?: ContratoLocacaoScalarWhereWithAggregatesInput | ContratoLocacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContratoLocacao"> | number
    dataLocacao?: DateTimeWithAggregatesFilter<"ContratoLocacao"> | Date | string
    dataDevolucao?: DateTimeWithAggregatesFilter<"ContratoLocacao"> | Date | string
    valorCaucao?: FloatWithAggregatesFilter<"ContratoLocacao"> | number
    valorTotal?: FloatWithAggregatesFilter<"ContratoLocacao"> | number
    status?: StringWithAggregatesFilter<"ContratoLocacao"> | string
  }

  export type OcorrenciaWhereInput = {
    AND?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    OR?: OcorrenciaWhereInput[]
    NOT?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    id?: IntFilter<"Ocorrencia"> | number
    descricao?: StringFilter<"Ocorrencia"> | string
    dataOcorrencia?: DateTimeFilter<"Ocorrencia"> | Date | string
    valorOcorrencia?: FloatFilter<"Ocorrencia"> | number
    contratoId?: IntFilter<"Ocorrencia"> | number
    contrato?: XOR<ContratoLocacaoScalarRelationFilter, ContratoLocacaoWhereInput>
  }

  export type OcorrenciaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataOcorrencia?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
    contrato?: ContratoLocacaoOrderByWithRelationInput
  }

  export type OcorrenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    OR?: OcorrenciaWhereInput[]
    NOT?: OcorrenciaWhereInput | OcorrenciaWhereInput[]
    descricao?: StringFilter<"Ocorrencia"> | string
    dataOcorrencia?: DateTimeFilter<"Ocorrencia"> | Date | string
    valorOcorrencia?: FloatFilter<"Ocorrencia"> | number
    contratoId?: IntFilter<"Ocorrencia"> | number
    contrato?: XOR<ContratoLocacaoScalarRelationFilter, ContratoLocacaoWhereInput>
  }, "id">

  export type OcorrenciaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataOcorrencia?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
    _count?: OcorrenciaCountOrderByAggregateInput
    _avg?: OcorrenciaAvgOrderByAggregateInput
    _max?: OcorrenciaMaxOrderByAggregateInput
    _min?: OcorrenciaMinOrderByAggregateInput
    _sum?: OcorrenciaSumOrderByAggregateInput
  }

  export type OcorrenciaScalarWhereWithAggregatesInput = {
    AND?: OcorrenciaScalarWhereWithAggregatesInput | OcorrenciaScalarWhereWithAggregatesInput[]
    OR?: OcorrenciaScalarWhereWithAggregatesInput[]
    NOT?: OcorrenciaScalarWhereWithAggregatesInput | OcorrenciaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ocorrencia"> | number
    descricao?: StringWithAggregatesFilter<"Ocorrencia"> | string
    dataOcorrencia?: DateTimeWithAggregatesFilter<"Ocorrencia"> | Date | string
    valorOcorrencia?: FloatWithAggregatesFilter<"Ocorrencia"> | number
    contratoId?: IntWithAggregatesFilter<"Ocorrencia"> | number
  }

  export type PagamentoWhereInput = {
    AND?: PagamentoWhereInput | PagamentoWhereInput[]
    OR?: PagamentoWhereInput[]
    NOT?: PagamentoWhereInput | PagamentoWhereInput[]
    id?: IntFilter<"Pagamento"> | number
    data?: DateTimeFilter<"Pagamento"> | Date | string
    valorPago?: FloatFilter<"Pagamento"> | number
    formaPagamento?: StringFilter<"Pagamento"> | string
    contratoId?: IntFilter<"Pagamento"> | number
    contrato?: XOR<ContratoLocacaoScalarRelationFilter, ContratoLocacaoWhereInput>
  }

  export type PagamentoOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    contratoId?: SortOrder
    contrato?: ContratoLocacaoOrderByWithRelationInput
  }

  export type PagamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PagamentoWhereInput | PagamentoWhereInput[]
    OR?: PagamentoWhereInput[]
    NOT?: PagamentoWhereInput | PagamentoWhereInput[]
    data?: DateTimeFilter<"Pagamento"> | Date | string
    valorPago?: FloatFilter<"Pagamento"> | number
    formaPagamento?: StringFilter<"Pagamento"> | string
    contratoId?: IntFilter<"Pagamento"> | number
    contrato?: XOR<ContratoLocacaoScalarRelationFilter, ContratoLocacaoWhereInput>
  }, "id">

  export type PagamentoOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    contratoId?: SortOrder
    _count?: PagamentoCountOrderByAggregateInput
    _avg?: PagamentoAvgOrderByAggregateInput
    _max?: PagamentoMaxOrderByAggregateInput
    _min?: PagamentoMinOrderByAggregateInput
    _sum?: PagamentoSumOrderByAggregateInput
  }

  export type PagamentoScalarWhereWithAggregatesInput = {
    AND?: PagamentoScalarWhereWithAggregatesInput | PagamentoScalarWhereWithAggregatesInput[]
    OR?: PagamentoScalarWhereWithAggregatesInput[]
    NOT?: PagamentoScalarWhereWithAggregatesInput | PagamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pagamento"> | number
    data?: DateTimeWithAggregatesFilter<"Pagamento"> | Date | string
    valorPago?: FloatWithAggregatesFilter<"Pagamento"> | number
    formaPagamento?: StringWithAggregatesFilter<"Pagamento"> | string
    contratoId?: IntWithAggregatesFilter<"Pagamento"> | number
  }

  export type CategoriaCreateInput = {
    tipo: string
    valorLocacao: number
    modelos?: ModeloCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    tipo: string
    valorLocacao: number
    modelos?: ModeloUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    valorLocacao?: FloatFieldUpdateOperationsInput | number
    modelos?: ModeloUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    valorLocacao?: FloatFieldUpdateOperationsInput | number
    modelos?: ModeloUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    tipo: string
    valorLocacao: number
  }

  export type CategoriaUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    valorLocacao?: FloatFieldUpdateOperationsInput | number
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    valorLocacao?: FloatFieldUpdateOperationsInput | number
  }

  export type MarcaCreateInput = {
    nome: string
    modelos?: ModeloCreateNestedManyWithoutMarcaInput
  }

  export type MarcaUncheckedCreateInput = {
    id?: number
    nome: string
    modelos?: ModeloUncheckedCreateNestedManyWithoutMarcaInput
  }

  export type MarcaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    modelos?: ModeloUpdateManyWithoutMarcaNestedInput
  }

  export type MarcaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    modelos?: ModeloUncheckedUpdateManyWithoutMarcaNestedInput
  }

  export type MarcaCreateManyInput = {
    id?: number
    nome: string
  }

  export type MarcaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MarcaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloCreateInput = {
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoria: CategoriaCreateNestedOneWithoutModelosInput
    marca: MarcaCreateNestedOneWithoutModelosInput
    veiculos?: VeiculoCreateNestedManyWithoutModeloInput
  }

  export type ModeloUncheckedCreateInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoriaId: number
    marcaId: number
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutModeloInput
  }

  export type ModeloUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutModelosNestedInput
    marca?: MarcaUpdateOneRequiredWithoutModelosNestedInput
    veiculos?: VeiculoUpdateManyWithoutModeloNestedInput
  }

  export type ModeloUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    marcaId?: IntFieldUpdateOperationsInput | number
    veiculos?: VeiculoUncheckedUpdateManyWithoutModeloNestedInput
  }

  export type ModeloCreateManyInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoriaId: number
    marcaId: number
  }

  export type ModeloUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
  }

  export type ModeloUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    marcaId?: IntFieldUpdateOperationsInput | number
  }

  export type VeiculoCreateInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modelo: ModeloCreateNestedOneWithoutVeiculosInput
    manutencoes?: ManutencaoCreateNestedManyWithoutVeiculoInput
    contratos?: ContratoLocacaoCreateNestedManyWithoutVeiculosInput
  }

  export type VeiculoUncheckedCreateInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modeloId: number
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutVeiculoInput
    contratos?: ContratoLocacaoUncheckedCreateNestedManyWithoutVeiculosInput
  }

  export type VeiculoUpdateInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modelo?: ModeloUpdateOneRequiredWithoutVeiculosNestedInput
    manutencoes?: ManutencaoUpdateManyWithoutVeiculoNestedInput
    contratos?: ContratoLocacaoUpdateManyWithoutVeiculosNestedInput
  }

  export type VeiculoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutVeiculoNestedInput
    contratos?: ContratoLocacaoUncheckedUpdateManyWithoutVeiculosNestedInput
  }

  export type VeiculoCreateManyInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modeloId: number
  }

  export type VeiculoUpdateManyMutationInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type VeiculoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoCreateInput = {
    descricao: string
    dataManutencao: Date | string
    valorManutencao: number
    veiculo: VeiculoCreateNestedOneWithoutManutencoesInput
  }

  export type ManutencaoUncheckedCreateInput = {
    id?: number
    descricao: string
    dataManutencao: Date | string
    valorManutencao: number
    veiculoId: number
  }

  export type ManutencaoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
    veiculo?: VeiculoUpdateOneRequiredWithoutManutencoesNestedInput
  }

  export type ManutencaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
    veiculoId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoCreateManyInput = {
    id?: number
    descricao: string
    dataManutencao: Date | string
    valorManutencao: number
    veiculoId: number
  }

  export type ManutencaoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
  }

  export type ManutencaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
    veiculoId?: IntFieldUpdateOperationsInput | number
  }

  export type ContratoLocacaoCreateInput = {
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    veiculos?: VeiculoCreateNestedManyWithoutContratosInput
    ocorrencias?: OcorrenciaCreateNestedManyWithoutContratoInput
    pagamentos?: PagamentoCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoUncheckedCreateInput = {
    id?: number
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutContratosInput
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutContratoInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoUpdateInput = {
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUpdateManyWithoutContratosNestedInput
    ocorrencias?: OcorrenciaUpdateManyWithoutContratoNestedInput
    pagamentos?: PagamentoUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUncheckedUpdateManyWithoutContratosNestedInput
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutContratoNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoCreateManyInput = {
    id?: number
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
  }

  export type ContratoLocacaoUpdateManyMutationInput = {
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ContratoLocacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaCreateInput = {
    descricao: string
    dataOcorrencia: Date | string
    valorOcorrencia: number
    contrato: ContratoLocacaoCreateNestedOneWithoutOcorrenciasInput
  }

  export type OcorrenciaUncheckedCreateInput = {
    id?: number
    descricao: string
    dataOcorrencia: Date | string
    valorOcorrencia: number
    contratoId: number
  }

  export type OcorrenciaUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
    contrato?: ContratoLocacaoUpdateOneRequiredWithoutOcorrenciasNestedInput
  }

  export type OcorrenciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
  }

  export type OcorrenciaCreateManyInput = {
    id?: number
    descricao: string
    dataOcorrencia: Date | string
    valorOcorrencia: number
    contratoId: number
  }

  export type OcorrenciaUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
  }

  export type OcorrenciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
  }

  export type PagamentoCreateInput = {
    data: Date | string
    valorPago: number
    formaPagamento: string
    contrato: ContratoLocacaoCreateNestedOneWithoutPagamentosInput
  }

  export type PagamentoUncheckedCreateInput = {
    id?: number
    data: Date | string
    valorPago: number
    formaPagamento: string
    contratoId: number
  }

  export type PagamentoUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
    contrato?: ContratoLocacaoUpdateOneRequiredWithoutPagamentosNestedInput
  }

  export type PagamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
  }

  export type PagamentoCreateManyInput = {
    id?: number
    data: Date | string
    valorPago: number
    formaPagamento: string
    contratoId: number
  }

  export type PagamentoUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
  }

  export type PagamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ModeloListRelationFilter = {
    every?: ModeloWhereInput
    some?: ModeloWhereInput
    none?: ModeloWhereInput
  }

  export type ModeloOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    valorLocacao?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    valorLocacao?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    valorLocacao?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    valorLocacao?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
    valorLocacao?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MarcaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type MarcaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MarcaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type MarcaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type MarcaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CategoriaScalarRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type MarcaScalarRelationFilter = {
    is?: MarcaWhereInput
    isNot?: MarcaWhereInput
  }

  export type VeiculoListRelationFilter = {
    every?: VeiculoWhereInput
    some?: VeiculoWhereInput
    none?: VeiculoWhereInput
  }

  export type VeiculoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModeloCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    anoModelo?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
  }

  export type ModeloAvgOrderByAggregateInput = {
    id?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
  }

  export type ModeloMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    anoModelo?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
  }

  export type ModeloMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    anoModelo?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
  }

  export type ModeloSumOrderByAggregateInput = {
    id?: SortOrder
    qtModelo?: SortOrder
    categoriaId?: SortOrder
    marcaId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ModeloScalarRelationFilter = {
    is?: ModeloWhereInput
    isNot?: ModeloWhereInput
  }

  export type ManutencaoListRelationFilter = {
    every?: ManutencaoWhereInput
    some?: ManutencaoWhereInput
    none?: ManutencaoWhereInput
  }

  export type ContratoLocacaoListRelationFilter = {
    every?: ContratoLocacaoWhereInput
    some?: ContratoLocacaoWhereInput
    none?: ContratoLocacaoWhereInput
  }

  export type ManutencaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContratoLocacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VeiculoCountOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoAvgOrderByAggregateInput = {
    id?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoMaxOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoMinOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    chassi?: SortOrder
    anoFabricacao?: SortOrder
    cor?: SortOrder
    status?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoSumOrderByAggregateInput = {
    id?: SortOrder
    modeloId?: SortOrder
  }

  export type VeiculoScalarRelationFilter = {
    is?: VeiculoWhereInput
    isNot?: VeiculoWhereInput
  }

  export type ManutencaoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataManutencao?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
  }

  export type ManutencaoAvgOrderByAggregateInput = {
    id?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
  }

  export type ManutencaoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataManutencao?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
  }

  export type ManutencaoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataManutencao?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
  }

  export type ManutencaoSumOrderByAggregateInput = {
    id?: SortOrder
    valorManutencao?: SortOrder
    veiculoId?: SortOrder
  }

  export type OcorrenciaListRelationFilter = {
    every?: OcorrenciaWhereInput
    some?: OcorrenciaWhereInput
    none?: OcorrenciaWhereInput
  }

  export type PagamentoListRelationFilter = {
    every?: PagamentoWhereInput
    some?: PagamentoWhereInput
    none?: PagamentoWhereInput
  }

  export type OcorrenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PagamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContratoLocacaoCountOrderByAggregateInput = {
    id?: SortOrder
    dataLocacao?: SortOrder
    dataDevolucao?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
    status?: SortOrder
  }

  export type ContratoLocacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
  }

  export type ContratoLocacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    dataLocacao?: SortOrder
    dataDevolucao?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
    status?: SortOrder
  }

  export type ContratoLocacaoMinOrderByAggregateInput = {
    id?: SortOrder
    dataLocacao?: SortOrder
    dataDevolucao?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
    status?: SortOrder
  }

  export type ContratoLocacaoSumOrderByAggregateInput = {
    id?: SortOrder
    valorCaucao?: SortOrder
    valorTotal?: SortOrder
  }

  export type ContratoLocacaoScalarRelationFilter = {
    is?: ContratoLocacaoWhereInput
    isNot?: ContratoLocacaoWhereInput
  }

  export type OcorrenciaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataOcorrencia?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaAvgOrderByAggregateInput = {
    id?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataOcorrencia?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    dataOcorrencia?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
  }

  export type OcorrenciaSumOrderByAggregateInput = {
    id?: SortOrder
    valorOcorrencia?: SortOrder
    contratoId?: SortOrder
  }

  export type PagamentoCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    contratoId?: SortOrder
  }

  export type PagamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    valorPago?: SortOrder
    contratoId?: SortOrder
  }

  export type PagamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    contratoId?: SortOrder
  }

  export type PagamentoMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    contratoId?: SortOrder
  }

  export type PagamentoSumOrderByAggregateInput = {
    id?: SortOrder
    valorPago?: SortOrder
    contratoId?: SortOrder
  }

  export type ModeloCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<ModeloCreateWithoutCategoriaInput, ModeloUncheckedCreateWithoutCategoriaInput> | ModeloCreateWithoutCategoriaInput[] | ModeloUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutCategoriaInput | ModeloCreateOrConnectWithoutCategoriaInput[]
    createMany?: ModeloCreateManyCategoriaInputEnvelope
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
  }

  export type ModeloUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<ModeloCreateWithoutCategoriaInput, ModeloUncheckedCreateWithoutCategoriaInput> | ModeloCreateWithoutCategoriaInput[] | ModeloUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutCategoriaInput | ModeloCreateOrConnectWithoutCategoriaInput[]
    createMany?: ModeloCreateManyCategoriaInputEnvelope
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ModeloUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<ModeloCreateWithoutCategoriaInput, ModeloUncheckedCreateWithoutCategoriaInput> | ModeloCreateWithoutCategoriaInput[] | ModeloUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutCategoriaInput | ModeloCreateOrConnectWithoutCategoriaInput[]
    upsert?: ModeloUpsertWithWhereUniqueWithoutCategoriaInput | ModeloUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: ModeloCreateManyCategoriaInputEnvelope
    set?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    disconnect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    delete?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    update?: ModeloUpdateWithWhereUniqueWithoutCategoriaInput | ModeloUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: ModeloUpdateManyWithWhereWithoutCategoriaInput | ModeloUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: ModeloScalarWhereInput | ModeloScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ModeloUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<ModeloCreateWithoutCategoriaInput, ModeloUncheckedCreateWithoutCategoriaInput> | ModeloCreateWithoutCategoriaInput[] | ModeloUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutCategoriaInput | ModeloCreateOrConnectWithoutCategoriaInput[]
    upsert?: ModeloUpsertWithWhereUniqueWithoutCategoriaInput | ModeloUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: ModeloCreateManyCategoriaInputEnvelope
    set?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    disconnect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    delete?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    update?: ModeloUpdateWithWhereUniqueWithoutCategoriaInput | ModeloUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: ModeloUpdateManyWithWhereWithoutCategoriaInput | ModeloUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: ModeloScalarWhereInput | ModeloScalarWhereInput[]
  }

  export type ModeloCreateNestedManyWithoutMarcaInput = {
    create?: XOR<ModeloCreateWithoutMarcaInput, ModeloUncheckedCreateWithoutMarcaInput> | ModeloCreateWithoutMarcaInput[] | ModeloUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutMarcaInput | ModeloCreateOrConnectWithoutMarcaInput[]
    createMany?: ModeloCreateManyMarcaInputEnvelope
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
  }

  export type ModeloUncheckedCreateNestedManyWithoutMarcaInput = {
    create?: XOR<ModeloCreateWithoutMarcaInput, ModeloUncheckedCreateWithoutMarcaInput> | ModeloCreateWithoutMarcaInput[] | ModeloUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutMarcaInput | ModeloCreateOrConnectWithoutMarcaInput[]
    createMany?: ModeloCreateManyMarcaInputEnvelope
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
  }

  export type ModeloUpdateManyWithoutMarcaNestedInput = {
    create?: XOR<ModeloCreateWithoutMarcaInput, ModeloUncheckedCreateWithoutMarcaInput> | ModeloCreateWithoutMarcaInput[] | ModeloUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutMarcaInput | ModeloCreateOrConnectWithoutMarcaInput[]
    upsert?: ModeloUpsertWithWhereUniqueWithoutMarcaInput | ModeloUpsertWithWhereUniqueWithoutMarcaInput[]
    createMany?: ModeloCreateManyMarcaInputEnvelope
    set?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    disconnect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    delete?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    update?: ModeloUpdateWithWhereUniqueWithoutMarcaInput | ModeloUpdateWithWhereUniqueWithoutMarcaInput[]
    updateMany?: ModeloUpdateManyWithWhereWithoutMarcaInput | ModeloUpdateManyWithWhereWithoutMarcaInput[]
    deleteMany?: ModeloScalarWhereInput | ModeloScalarWhereInput[]
  }

  export type ModeloUncheckedUpdateManyWithoutMarcaNestedInput = {
    create?: XOR<ModeloCreateWithoutMarcaInput, ModeloUncheckedCreateWithoutMarcaInput> | ModeloCreateWithoutMarcaInput[] | ModeloUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: ModeloCreateOrConnectWithoutMarcaInput | ModeloCreateOrConnectWithoutMarcaInput[]
    upsert?: ModeloUpsertWithWhereUniqueWithoutMarcaInput | ModeloUpsertWithWhereUniqueWithoutMarcaInput[]
    createMany?: ModeloCreateManyMarcaInputEnvelope
    set?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    disconnect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    delete?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    connect?: ModeloWhereUniqueInput | ModeloWhereUniqueInput[]
    update?: ModeloUpdateWithWhereUniqueWithoutMarcaInput | ModeloUpdateWithWhereUniqueWithoutMarcaInput[]
    updateMany?: ModeloUpdateManyWithWhereWithoutMarcaInput | ModeloUpdateManyWithWhereWithoutMarcaInput[]
    deleteMany?: ModeloScalarWhereInput | ModeloScalarWhereInput[]
  }

  export type CategoriaCreateNestedOneWithoutModelosInput = {
    create?: XOR<CategoriaCreateWithoutModelosInput, CategoriaUncheckedCreateWithoutModelosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutModelosInput
    connect?: CategoriaWhereUniqueInput
  }

  export type MarcaCreateNestedOneWithoutModelosInput = {
    create?: XOR<MarcaCreateWithoutModelosInput, MarcaUncheckedCreateWithoutModelosInput>
    connectOrCreate?: MarcaCreateOrConnectWithoutModelosInput
    connect?: MarcaWhereUniqueInput
  }

  export type VeiculoCreateNestedManyWithoutModeloInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type VeiculoUncheckedCreateNestedManyWithoutModeloInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CategoriaUpdateOneRequiredWithoutModelosNestedInput = {
    create?: XOR<CategoriaCreateWithoutModelosInput, CategoriaUncheckedCreateWithoutModelosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutModelosInput
    upsert?: CategoriaUpsertWithoutModelosInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutModelosInput, CategoriaUpdateWithoutModelosInput>, CategoriaUncheckedUpdateWithoutModelosInput>
  }

  export type MarcaUpdateOneRequiredWithoutModelosNestedInput = {
    create?: XOR<MarcaCreateWithoutModelosInput, MarcaUncheckedCreateWithoutModelosInput>
    connectOrCreate?: MarcaCreateOrConnectWithoutModelosInput
    upsert?: MarcaUpsertWithoutModelosInput
    connect?: MarcaWhereUniqueInput
    update?: XOR<XOR<MarcaUpdateToOneWithWhereWithoutModelosInput, MarcaUpdateWithoutModelosInput>, MarcaUncheckedUpdateWithoutModelosInput>
  }

  export type VeiculoUpdateManyWithoutModeloNestedInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutModeloInput | VeiculoUpsertWithWhereUniqueWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutModeloInput | VeiculoUpdateWithWhereUniqueWithoutModeloInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutModeloInput | VeiculoUpdateManyWithWhereWithoutModeloInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type VeiculoUncheckedUpdateManyWithoutModeloNestedInput = {
    create?: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput> | VeiculoCreateWithoutModeloInput[] | VeiculoUncheckedCreateWithoutModeloInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutModeloInput | VeiculoCreateOrConnectWithoutModeloInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutModeloInput | VeiculoUpsertWithWhereUniqueWithoutModeloInput[]
    createMany?: VeiculoCreateManyModeloInputEnvelope
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutModeloInput | VeiculoUpdateWithWhereUniqueWithoutModeloInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutModeloInput | VeiculoUpdateManyWithWhereWithoutModeloInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type ModeloCreateNestedOneWithoutVeiculosInput = {
    create?: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: ModeloCreateOrConnectWithoutVeiculosInput
    connect?: ModeloWhereUniqueInput
  }

  export type ManutencaoCreateNestedManyWithoutVeiculoInput = {
    create?: XOR<ManutencaoCreateWithoutVeiculoInput, ManutencaoUncheckedCreateWithoutVeiculoInput> | ManutencaoCreateWithoutVeiculoInput[] | ManutencaoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutVeiculoInput | ManutencaoCreateOrConnectWithoutVeiculoInput[]
    createMany?: ManutencaoCreateManyVeiculoInputEnvelope
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
  }

  export type ContratoLocacaoCreateNestedManyWithoutVeiculosInput = {
    create?: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput> | ContratoLocacaoCreateWithoutVeiculosInput[] | ContratoLocacaoUncheckedCreateWithoutVeiculosInput[]
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutVeiculosInput | ContratoLocacaoCreateOrConnectWithoutVeiculosInput[]
    connect?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
  }

  export type ManutencaoUncheckedCreateNestedManyWithoutVeiculoInput = {
    create?: XOR<ManutencaoCreateWithoutVeiculoInput, ManutencaoUncheckedCreateWithoutVeiculoInput> | ManutencaoCreateWithoutVeiculoInput[] | ManutencaoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutVeiculoInput | ManutencaoCreateOrConnectWithoutVeiculoInput[]
    createMany?: ManutencaoCreateManyVeiculoInputEnvelope
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
  }

  export type ContratoLocacaoUncheckedCreateNestedManyWithoutVeiculosInput = {
    create?: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput> | ContratoLocacaoCreateWithoutVeiculosInput[] | ContratoLocacaoUncheckedCreateWithoutVeiculosInput[]
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutVeiculosInput | ContratoLocacaoCreateOrConnectWithoutVeiculosInput[]
    connect?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
  }

  export type ModeloUpdateOneRequiredWithoutVeiculosNestedInput = {
    create?: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
    connectOrCreate?: ModeloCreateOrConnectWithoutVeiculosInput
    upsert?: ModeloUpsertWithoutVeiculosInput
    connect?: ModeloWhereUniqueInput
    update?: XOR<XOR<ModeloUpdateToOneWithWhereWithoutVeiculosInput, ModeloUpdateWithoutVeiculosInput>, ModeloUncheckedUpdateWithoutVeiculosInput>
  }

  export type ManutencaoUpdateManyWithoutVeiculoNestedInput = {
    create?: XOR<ManutencaoCreateWithoutVeiculoInput, ManutencaoUncheckedCreateWithoutVeiculoInput> | ManutencaoCreateWithoutVeiculoInput[] | ManutencaoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutVeiculoInput | ManutencaoCreateOrConnectWithoutVeiculoInput[]
    upsert?: ManutencaoUpsertWithWhereUniqueWithoutVeiculoInput | ManutencaoUpsertWithWhereUniqueWithoutVeiculoInput[]
    createMany?: ManutencaoCreateManyVeiculoInputEnvelope
    set?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    disconnect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    delete?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    update?: ManutencaoUpdateWithWhereUniqueWithoutVeiculoInput | ManutencaoUpdateWithWhereUniqueWithoutVeiculoInput[]
    updateMany?: ManutencaoUpdateManyWithWhereWithoutVeiculoInput | ManutencaoUpdateManyWithWhereWithoutVeiculoInput[]
    deleteMany?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
  }

  export type ContratoLocacaoUpdateManyWithoutVeiculosNestedInput = {
    create?: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput> | ContratoLocacaoCreateWithoutVeiculosInput[] | ContratoLocacaoUncheckedCreateWithoutVeiculosInput[]
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutVeiculosInput | ContratoLocacaoCreateOrConnectWithoutVeiculosInput[]
    upsert?: ContratoLocacaoUpsertWithWhereUniqueWithoutVeiculosInput | ContratoLocacaoUpsertWithWhereUniqueWithoutVeiculosInput[]
    set?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    disconnect?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    delete?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    connect?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    update?: ContratoLocacaoUpdateWithWhereUniqueWithoutVeiculosInput | ContratoLocacaoUpdateWithWhereUniqueWithoutVeiculosInput[]
    updateMany?: ContratoLocacaoUpdateManyWithWhereWithoutVeiculosInput | ContratoLocacaoUpdateManyWithWhereWithoutVeiculosInput[]
    deleteMany?: ContratoLocacaoScalarWhereInput | ContratoLocacaoScalarWhereInput[]
  }

  export type ManutencaoUncheckedUpdateManyWithoutVeiculoNestedInput = {
    create?: XOR<ManutencaoCreateWithoutVeiculoInput, ManutencaoUncheckedCreateWithoutVeiculoInput> | ManutencaoCreateWithoutVeiculoInput[] | ManutencaoUncheckedCreateWithoutVeiculoInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutVeiculoInput | ManutencaoCreateOrConnectWithoutVeiculoInput[]
    upsert?: ManutencaoUpsertWithWhereUniqueWithoutVeiculoInput | ManutencaoUpsertWithWhereUniqueWithoutVeiculoInput[]
    createMany?: ManutencaoCreateManyVeiculoInputEnvelope
    set?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    disconnect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    delete?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    update?: ManutencaoUpdateWithWhereUniqueWithoutVeiculoInput | ManutencaoUpdateWithWhereUniqueWithoutVeiculoInput[]
    updateMany?: ManutencaoUpdateManyWithWhereWithoutVeiculoInput | ManutencaoUpdateManyWithWhereWithoutVeiculoInput[]
    deleteMany?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
  }

  export type ContratoLocacaoUncheckedUpdateManyWithoutVeiculosNestedInput = {
    create?: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput> | ContratoLocacaoCreateWithoutVeiculosInput[] | ContratoLocacaoUncheckedCreateWithoutVeiculosInput[]
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutVeiculosInput | ContratoLocacaoCreateOrConnectWithoutVeiculosInput[]
    upsert?: ContratoLocacaoUpsertWithWhereUniqueWithoutVeiculosInput | ContratoLocacaoUpsertWithWhereUniqueWithoutVeiculosInput[]
    set?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    disconnect?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    delete?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    connect?: ContratoLocacaoWhereUniqueInput | ContratoLocacaoWhereUniqueInput[]
    update?: ContratoLocacaoUpdateWithWhereUniqueWithoutVeiculosInput | ContratoLocacaoUpdateWithWhereUniqueWithoutVeiculosInput[]
    updateMany?: ContratoLocacaoUpdateManyWithWhereWithoutVeiculosInput | ContratoLocacaoUpdateManyWithWhereWithoutVeiculosInput[]
    deleteMany?: ContratoLocacaoScalarWhereInput | ContratoLocacaoScalarWhereInput[]
  }

  export type VeiculoCreateNestedOneWithoutManutencoesInput = {
    create?: XOR<VeiculoCreateWithoutManutencoesInput, VeiculoUncheckedCreateWithoutManutencoesInput>
    connectOrCreate?: VeiculoCreateOrConnectWithoutManutencoesInput
    connect?: VeiculoWhereUniqueInput
  }

  export type VeiculoUpdateOneRequiredWithoutManutencoesNestedInput = {
    create?: XOR<VeiculoCreateWithoutManutencoesInput, VeiculoUncheckedCreateWithoutManutencoesInput>
    connectOrCreate?: VeiculoCreateOrConnectWithoutManutencoesInput
    upsert?: VeiculoUpsertWithoutManutencoesInput
    connect?: VeiculoWhereUniqueInput
    update?: XOR<XOR<VeiculoUpdateToOneWithWhereWithoutManutencoesInput, VeiculoUpdateWithoutManutencoesInput>, VeiculoUncheckedUpdateWithoutManutencoesInput>
  }

  export type VeiculoCreateNestedManyWithoutContratosInput = {
    create?: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput> | VeiculoCreateWithoutContratosInput[] | VeiculoUncheckedCreateWithoutContratosInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutContratosInput | VeiculoCreateOrConnectWithoutContratosInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type OcorrenciaCreateNestedManyWithoutContratoInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoInput, OcorrenciaUncheckedCreateWithoutContratoInput> | OcorrenciaCreateWithoutContratoInput[] | OcorrenciaUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoInput | OcorrenciaCreateOrConnectWithoutContratoInput[]
    createMany?: OcorrenciaCreateManyContratoInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type PagamentoCreateNestedManyWithoutContratoInput = {
    create?: XOR<PagamentoCreateWithoutContratoInput, PagamentoUncheckedCreateWithoutContratoInput> | PagamentoCreateWithoutContratoInput[] | PagamentoUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutContratoInput | PagamentoCreateOrConnectWithoutContratoInput[]
    createMany?: PagamentoCreateManyContratoInputEnvelope
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
  }

  export type VeiculoUncheckedCreateNestedManyWithoutContratosInput = {
    create?: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput> | VeiculoCreateWithoutContratosInput[] | VeiculoUncheckedCreateWithoutContratosInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutContratosInput | VeiculoCreateOrConnectWithoutContratosInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
  }

  export type OcorrenciaUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoInput, OcorrenciaUncheckedCreateWithoutContratoInput> | OcorrenciaCreateWithoutContratoInput[] | OcorrenciaUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoInput | OcorrenciaCreateOrConnectWithoutContratoInput[]
    createMany?: OcorrenciaCreateManyContratoInputEnvelope
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
  }

  export type PagamentoUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<PagamentoCreateWithoutContratoInput, PagamentoUncheckedCreateWithoutContratoInput> | PagamentoCreateWithoutContratoInput[] | PagamentoUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutContratoInput | PagamentoCreateOrConnectWithoutContratoInput[]
    createMany?: PagamentoCreateManyContratoInputEnvelope
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
  }

  export type VeiculoUpdateManyWithoutContratosNestedInput = {
    create?: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput> | VeiculoCreateWithoutContratosInput[] | VeiculoUncheckedCreateWithoutContratosInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutContratosInput | VeiculoCreateOrConnectWithoutContratosInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutContratosInput | VeiculoUpsertWithWhereUniqueWithoutContratosInput[]
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutContratosInput | VeiculoUpdateWithWhereUniqueWithoutContratosInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutContratosInput | VeiculoUpdateManyWithWhereWithoutContratosInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type OcorrenciaUpdateManyWithoutContratoNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoInput, OcorrenciaUncheckedCreateWithoutContratoInput> | OcorrenciaCreateWithoutContratoInput[] | OcorrenciaUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoInput | OcorrenciaCreateOrConnectWithoutContratoInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutContratoInput | OcorrenciaUpsertWithWhereUniqueWithoutContratoInput[]
    createMany?: OcorrenciaCreateManyContratoInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutContratoInput | OcorrenciaUpdateWithWhereUniqueWithoutContratoInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutContratoInput | OcorrenciaUpdateManyWithWhereWithoutContratoInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type PagamentoUpdateManyWithoutContratoNestedInput = {
    create?: XOR<PagamentoCreateWithoutContratoInput, PagamentoUncheckedCreateWithoutContratoInput> | PagamentoCreateWithoutContratoInput[] | PagamentoUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutContratoInput | PagamentoCreateOrConnectWithoutContratoInput[]
    upsert?: PagamentoUpsertWithWhereUniqueWithoutContratoInput | PagamentoUpsertWithWhereUniqueWithoutContratoInput[]
    createMany?: PagamentoCreateManyContratoInputEnvelope
    set?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    disconnect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    delete?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    update?: PagamentoUpdateWithWhereUniqueWithoutContratoInput | PagamentoUpdateWithWhereUniqueWithoutContratoInput[]
    updateMany?: PagamentoUpdateManyWithWhereWithoutContratoInput | PagamentoUpdateManyWithWhereWithoutContratoInput[]
    deleteMany?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
  }

  export type VeiculoUncheckedUpdateManyWithoutContratosNestedInput = {
    create?: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput> | VeiculoCreateWithoutContratosInput[] | VeiculoUncheckedCreateWithoutContratosInput[]
    connectOrCreate?: VeiculoCreateOrConnectWithoutContratosInput | VeiculoCreateOrConnectWithoutContratosInput[]
    upsert?: VeiculoUpsertWithWhereUniqueWithoutContratosInput | VeiculoUpsertWithWhereUniqueWithoutContratosInput[]
    set?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    disconnect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    delete?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    connect?: VeiculoWhereUniqueInput | VeiculoWhereUniqueInput[]
    update?: VeiculoUpdateWithWhereUniqueWithoutContratosInput | VeiculoUpdateWithWhereUniqueWithoutContratosInput[]
    updateMany?: VeiculoUpdateManyWithWhereWithoutContratosInput | VeiculoUpdateManyWithWhereWithoutContratosInput[]
    deleteMany?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
  }

  export type OcorrenciaUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<OcorrenciaCreateWithoutContratoInput, OcorrenciaUncheckedCreateWithoutContratoInput> | OcorrenciaCreateWithoutContratoInput[] | OcorrenciaUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: OcorrenciaCreateOrConnectWithoutContratoInput | OcorrenciaCreateOrConnectWithoutContratoInput[]
    upsert?: OcorrenciaUpsertWithWhereUniqueWithoutContratoInput | OcorrenciaUpsertWithWhereUniqueWithoutContratoInput[]
    createMany?: OcorrenciaCreateManyContratoInputEnvelope
    set?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    disconnect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    delete?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    connect?: OcorrenciaWhereUniqueInput | OcorrenciaWhereUniqueInput[]
    update?: OcorrenciaUpdateWithWhereUniqueWithoutContratoInput | OcorrenciaUpdateWithWhereUniqueWithoutContratoInput[]
    updateMany?: OcorrenciaUpdateManyWithWhereWithoutContratoInput | OcorrenciaUpdateManyWithWhereWithoutContratoInput[]
    deleteMany?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
  }

  export type PagamentoUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<PagamentoCreateWithoutContratoInput, PagamentoUncheckedCreateWithoutContratoInput> | PagamentoCreateWithoutContratoInput[] | PagamentoUncheckedCreateWithoutContratoInput[]
    connectOrCreate?: PagamentoCreateOrConnectWithoutContratoInput | PagamentoCreateOrConnectWithoutContratoInput[]
    upsert?: PagamentoUpsertWithWhereUniqueWithoutContratoInput | PagamentoUpsertWithWhereUniqueWithoutContratoInput[]
    createMany?: PagamentoCreateManyContratoInputEnvelope
    set?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    disconnect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    delete?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    connect?: PagamentoWhereUniqueInput | PagamentoWhereUniqueInput[]
    update?: PagamentoUpdateWithWhereUniqueWithoutContratoInput | PagamentoUpdateWithWhereUniqueWithoutContratoInput[]
    updateMany?: PagamentoUpdateManyWithWhereWithoutContratoInput | PagamentoUpdateManyWithWhereWithoutContratoInput[]
    deleteMany?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
  }

  export type ContratoLocacaoCreateNestedOneWithoutOcorrenciasInput = {
    create?: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutOcorrenciasInput
    connect?: ContratoLocacaoWhereUniqueInput
  }

  export type ContratoLocacaoUpdateOneRequiredWithoutOcorrenciasNestedInput = {
    create?: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutOcorrenciasInput
    upsert?: ContratoLocacaoUpsertWithoutOcorrenciasInput
    connect?: ContratoLocacaoWhereUniqueInput
    update?: XOR<XOR<ContratoLocacaoUpdateToOneWithWhereWithoutOcorrenciasInput, ContratoLocacaoUpdateWithoutOcorrenciasInput>, ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type ContratoLocacaoCreateNestedOneWithoutPagamentosInput = {
    create?: XOR<ContratoLocacaoCreateWithoutPagamentosInput, ContratoLocacaoUncheckedCreateWithoutPagamentosInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutPagamentosInput
    connect?: ContratoLocacaoWhereUniqueInput
  }

  export type ContratoLocacaoUpdateOneRequiredWithoutPagamentosNestedInput = {
    create?: XOR<ContratoLocacaoCreateWithoutPagamentosInput, ContratoLocacaoUncheckedCreateWithoutPagamentosInput>
    connectOrCreate?: ContratoLocacaoCreateOrConnectWithoutPagamentosInput
    upsert?: ContratoLocacaoUpsertWithoutPagamentosInput
    connect?: ContratoLocacaoWhereUniqueInput
    update?: XOR<XOR<ContratoLocacaoUpdateToOneWithWhereWithoutPagamentosInput, ContratoLocacaoUpdateWithoutPagamentosInput>, ContratoLocacaoUncheckedUpdateWithoutPagamentosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ModeloCreateWithoutCategoriaInput = {
    nome: string
    anoModelo: Date | string
    qtModelo: number
    marca: MarcaCreateNestedOneWithoutModelosInput
    veiculos?: VeiculoCreateNestedManyWithoutModeloInput
  }

  export type ModeloUncheckedCreateWithoutCategoriaInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    marcaId: number
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutModeloInput
  }

  export type ModeloCreateOrConnectWithoutCategoriaInput = {
    where: ModeloWhereUniqueInput
    create: XOR<ModeloCreateWithoutCategoriaInput, ModeloUncheckedCreateWithoutCategoriaInput>
  }

  export type ModeloCreateManyCategoriaInputEnvelope = {
    data: ModeloCreateManyCategoriaInput | ModeloCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type ModeloUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: ModeloWhereUniqueInput
    update: XOR<ModeloUpdateWithoutCategoriaInput, ModeloUncheckedUpdateWithoutCategoriaInput>
    create: XOR<ModeloCreateWithoutCategoriaInput, ModeloUncheckedCreateWithoutCategoriaInput>
  }

  export type ModeloUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: ModeloWhereUniqueInput
    data: XOR<ModeloUpdateWithoutCategoriaInput, ModeloUncheckedUpdateWithoutCategoriaInput>
  }

  export type ModeloUpdateManyWithWhereWithoutCategoriaInput = {
    where: ModeloScalarWhereInput
    data: XOR<ModeloUpdateManyMutationInput, ModeloUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type ModeloScalarWhereInput = {
    AND?: ModeloScalarWhereInput | ModeloScalarWhereInput[]
    OR?: ModeloScalarWhereInput[]
    NOT?: ModeloScalarWhereInput | ModeloScalarWhereInput[]
    id?: IntFilter<"Modelo"> | number
    nome?: StringFilter<"Modelo"> | string
    anoModelo?: DateTimeFilter<"Modelo"> | Date | string
    qtModelo?: IntFilter<"Modelo"> | number
    categoriaId?: IntFilter<"Modelo"> | number
    marcaId?: IntFilter<"Modelo"> | number
  }

  export type ModeloCreateWithoutMarcaInput = {
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoria: CategoriaCreateNestedOneWithoutModelosInput
    veiculos?: VeiculoCreateNestedManyWithoutModeloInput
  }

  export type ModeloUncheckedCreateWithoutMarcaInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoriaId: number
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutModeloInput
  }

  export type ModeloCreateOrConnectWithoutMarcaInput = {
    where: ModeloWhereUniqueInput
    create: XOR<ModeloCreateWithoutMarcaInput, ModeloUncheckedCreateWithoutMarcaInput>
  }

  export type ModeloCreateManyMarcaInputEnvelope = {
    data: ModeloCreateManyMarcaInput | ModeloCreateManyMarcaInput[]
    skipDuplicates?: boolean
  }

  export type ModeloUpsertWithWhereUniqueWithoutMarcaInput = {
    where: ModeloWhereUniqueInput
    update: XOR<ModeloUpdateWithoutMarcaInput, ModeloUncheckedUpdateWithoutMarcaInput>
    create: XOR<ModeloCreateWithoutMarcaInput, ModeloUncheckedCreateWithoutMarcaInput>
  }

  export type ModeloUpdateWithWhereUniqueWithoutMarcaInput = {
    where: ModeloWhereUniqueInput
    data: XOR<ModeloUpdateWithoutMarcaInput, ModeloUncheckedUpdateWithoutMarcaInput>
  }

  export type ModeloUpdateManyWithWhereWithoutMarcaInput = {
    where: ModeloScalarWhereInput
    data: XOR<ModeloUpdateManyMutationInput, ModeloUncheckedUpdateManyWithoutMarcaInput>
  }

  export type CategoriaCreateWithoutModelosInput = {
    tipo: string
    valorLocacao: number
  }

  export type CategoriaUncheckedCreateWithoutModelosInput = {
    id?: number
    tipo: string
    valorLocacao: number
  }

  export type CategoriaCreateOrConnectWithoutModelosInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutModelosInput, CategoriaUncheckedCreateWithoutModelosInput>
  }

  export type MarcaCreateWithoutModelosInput = {
    nome: string
  }

  export type MarcaUncheckedCreateWithoutModelosInput = {
    id?: number
    nome: string
  }

  export type MarcaCreateOrConnectWithoutModelosInput = {
    where: MarcaWhereUniqueInput
    create: XOR<MarcaCreateWithoutModelosInput, MarcaUncheckedCreateWithoutModelosInput>
  }

  export type VeiculoCreateWithoutModeloInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    manutencoes?: ManutencaoCreateNestedManyWithoutVeiculoInput
    contratos?: ContratoLocacaoCreateNestedManyWithoutVeiculosInput
  }

  export type VeiculoUncheckedCreateWithoutModeloInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutVeiculoInput
    contratos?: ContratoLocacaoUncheckedCreateNestedManyWithoutVeiculosInput
  }

  export type VeiculoCreateOrConnectWithoutModeloInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput>
  }

  export type VeiculoCreateManyModeloInputEnvelope = {
    data: VeiculoCreateManyModeloInput | VeiculoCreateManyModeloInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaUpsertWithoutModelosInput = {
    update: XOR<CategoriaUpdateWithoutModelosInput, CategoriaUncheckedUpdateWithoutModelosInput>
    create: XOR<CategoriaCreateWithoutModelosInput, CategoriaUncheckedCreateWithoutModelosInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutModelosInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutModelosInput, CategoriaUncheckedUpdateWithoutModelosInput>
  }

  export type CategoriaUpdateWithoutModelosInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    valorLocacao?: FloatFieldUpdateOperationsInput | number
  }

  export type CategoriaUncheckedUpdateWithoutModelosInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    valorLocacao?: FloatFieldUpdateOperationsInput | number
  }

  export type MarcaUpsertWithoutModelosInput = {
    update: XOR<MarcaUpdateWithoutModelosInput, MarcaUncheckedUpdateWithoutModelosInput>
    create: XOR<MarcaCreateWithoutModelosInput, MarcaUncheckedCreateWithoutModelosInput>
    where?: MarcaWhereInput
  }

  export type MarcaUpdateToOneWithWhereWithoutModelosInput = {
    where?: MarcaWhereInput
    data: XOR<MarcaUpdateWithoutModelosInput, MarcaUncheckedUpdateWithoutModelosInput>
  }

  export type MarcaUpdateWithoutModelosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MarcaUncheckedUpdateWithoutModelosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type VeiculoUpsertWithWhereUniqueWithoutModeloInput = {
    where: VeiculoWhereUniqueInput
    update: XOR<VeiculoUpdateWithoutModeloInput, VeiculoUncheckedUpdateWithoutModeloInput>
    create: XOR<VeiculoCreateWithoutModeloInput, VeiculoUncheckedCreateWithoutModeloInput>
  }

  export type VeiculoUpdateWithWhereUniqueWithoutModeloInput = {
    where: VeiculoWhereUniqueInput
    data: XOR<VeiculoUpdateWithoutModeloInput, VeiculoUncheckedUpdateWithoutModeloInput>
  }

  export type VeiculoUpdateManyWithWhereWithoutModeloInput = {
    where: VeiculoScalarWhereInput
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyWithoutModeloInput>
  }

  export type VeiculoScalarWhereInput = {
    AND?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
    OR?: VeiculoScalarWhereInput[]
    NOT?: VeiculoScalarWhereInput | VeiculoScalarWhereInput[]
    id?: IntFilter<"Veiculo"> | number
    placa?: StringFilter<"Veiculo"> | string
    chassi?: StringFilter<"Veiculo"> | string
    anoFabricacao?: DateTimeFilter<"Veiculo"> | Date | string
    cor?: StringFilter<"Veiculo"> | string
    status?: StringFilter<"Veiculo"> | string
    modeloId?: IntFilter<"Veiculo"> | number
  }

  export type ModeloCreateWithoutVeiculosInput = {
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoria: CategoriaCreateNestedOneWithoutModelosInput
    marca: MarcaCreateNestedOneWithoutModelosInput
  }

  export type ModeloUncheckedCreateWithoutVeiculosInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoriaId: number
    marcaId: number
  }

  export type ModeloCreateOrConnectWithoutVeiculosInput = {
    where: ModeloWhereUniqueInput
    create: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
  }

  export type ManutencaoCreateWithoutVeiculoInput = {
    descricao: string
    dataManutencao: Date | string
    valorManutencao: number
  }

  export type ManutencaoUncheckedCreateWithoutVeiculoInput = {
    id?: number
    descricao: string
    dataManutencao: Date | string
    valorManutencao: number
  }

  export type ManutencaoCreateOrConnectWithoutVeiculoInput = {
    where: ManutencaoWhereUniqueInput
    create: XOR<ManutencaoCreateWithoutVeiculoInput, ManutencaoUncheckedCreateWithoutVeiculoInput>
  }

  export type ManutencaoCreateManyVeiculoInputEnvelope = {
    data: ManutencaoCreateManyVeiculoInput | ManutencaoCreateManyVeiculoInput[]
    skipDuplicates?: boolean
  }

  export type ContratoLocacaoCreateWithoutVeiculosInput = {
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    ocorrencias?: OcorrenciaCreateNestedManyWithoutContratoInput
    pagamentos?: PagamentoCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoUncheckedCreateWithoutVeiculosInput = {
    id?: number
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutContratoInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoCreateOrConnectWithoutVeiculosInput = {
    where: ContratoLocacaoWhereUniqueInput
    create: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput>
  }

  export type ModeloUpsertWithoutVeiculosInput = {
    update: XOR<ModeloUpdateWithoutVeiculosInput, ModeloUncheckedUpdateWithoutVeiculosInput>
    create: XOR<ModeloCreateWithoutVeiculosInput, ModeloUncheckedCreateWithoutVeiculosInput>
    where?: ModeloWhereInput
  }

  export type ModeloUpdateToOneWithWhereWithoutVeiculosInput = {
    where?: ModeloWhereInput
    data: XOR<ModeloUpdateWithoutVeiculosInput, ModeloUncheckedUpdateWithoutVeiculosInput>
  }

  export type ModeloUpdateWithoutVeiculosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutModelosNestedInput
    marca?: MarcaUpdateOneRequiredWithoutModelosNestedInput
  }

  export type ModeloUncheckedUpdateWithoutVeiculosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    marcaId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoUpsertWithWhereUniqueWithoutVeiculoInput = {
    where: ManutencaoWhereUniqueInput
    update: XOR<ManutencaoUpdateWithoutVeiculoInput, ManutencaoUncheckedUpdateWithoutVeiculoInput>
    create: XOR<ManutencaoCreateWithoutVeiculoInput, ManutencaoUncheckedCreateWithoutVeiculoInput>
  }

  export type ManutencaoUpdateWithWhereUniqueWithoutVeiculoInput = {
    where: ManutencaoWhereUniqueInput
    data: XOR<ManutencaoUpdateWithoutVeiculoInput, ManutencaoUncheckedUpdateWithoutVeiculoInput>
  }

  export type ManutencaoUpdateManyWithWhereWithoutVeiculoInput = {
    where: ManutencaoScalarWhereInput
    data: XOR<ManutencaoUpdateManyMutationInput, ManutencaoUncheckedUpdateManyWithoutVeiculoInput>
  }

  export type ManutencaoScalarWhereInput = {
    AND?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
    OR?: ManutencaoScalarWhereInput[]
    NOT?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
    id?: IntFilter<"Manutencao"> | number
    descricao?: StringFilter<"Manutencao"> | string
    dataManutencao?: DateTimeFilter<"Manutencao"> | Date | string
    valorManutencao?: FloatFilter<"Manutencao"> | number
    veiculoId?: IntFilter<"Manutencao"> | number
  }

  export type ContratoLocacaoUpsertWithWhereUniqueWithoutVeiculosInput = {
    where: ContratoLocacaoWhereUniqueInput
    update: XOR<ContratoLocacaoUpdateWithoutVeiculosInput, ContratoLocacaoUncheckedUpdateWithoutVeiculosInput>
    create: XOR<ContratoLocacaoCreateWithoutVeiculosInput, ContratoLocacaoUncheckedCreateWithoutVeiculosInput>
  }

  export type ContratoLocacaoUpdateWithWhereUniqueWithoutVeiculosInput = {
    where: ContratoLocacaoWhereUniqueInput
    data: XOR<ContratoLocacaoUpdateWithoutVeiculosInput, ContratoLocacaoUncheckedUpdateWithoutVeiculosInput>
  }

  export type ContratoLocacaoUpdateManyWithWhereWithoutVeiculosInput = {
    where: ContratoLocacaoScalarWhereInput
    data: XOR<ContratoLocacaoUpdateManyMutationInput, ContratoLocacaoUncheckedUpdateManyWithoutVeiculosInput>
  }

  export type ContratoLocacaoScalarWhereInput = {
    AND?: ContratoLocacaoScalarWhereInput | ContratoLocacaoScalarWhereInput[]
    OR?: ContratoLocacaoScalarWhereInput[]
    NOT?: ContratoLocacaoScalarWhereInput | ContratoLocacaoScalarWhereInput[]
    id?: IntFilter<"ContratoLocacao"> | number
    dataLocacao?: DateTimeFilter<"ContratoLocacao"> | Date | string
    dataDevolucao?: DateTimeFilter<"ContratoLocacao"> | Date | string
    valorCaucao?: FloatFilter<"ContratoLocacao"> | number
    valorTotal?: FloatFilter<"ContratoLocacao"> | number
    status?: StringFilter<"ContratoLocacao"> | string
  }

  export type VeiculoCreateWithoutManutencoesInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modelo: ModeloCreateNestedOneWithoutVeiculosInput
    contratos?: ContratoLocacaoCreateNestedManyWithoutVeiculosInput
  }

  export type VeiculoUncheckedCreateWithoutManutencoesInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modeloId: number
    contratos?: ContratoLocacaoUncheckedCreateNestedManyWithoutVeiculosInput
  }

  export type VeiculoCreateOrConnectWithoutManutencoesInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutManutencoesInput, VeiculoUncheckedCreateWithoutManutencoesInput>
  }

  export type VeiculoUpsertWithoutManutencoesInput = {
    update: XOR<VeiculoUpdateWithoutManutencoesInput, VeiculoUncheckedUpdateWithoutManutencoesInput>
    create: XOR<VeiculoCreateWithoutManutencoesInput, VeiculoUncheckedCreateWithoutManutencoesInput>
    where?: VeiculoWhereInput
  }

  export type VeiculoUpdateToOneWithWhereWithoutManutencoesInput = {
    where?: VeiculoWhereInput
    data: XOR<VeiculoUpdateWithoutManutencoesInput, VeiculoUncheckedUpdateWithoutManutencoesInput>
  }

  export type VeiculoUpdateWithoutManutencoesInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modelo?: ModeloUpdateOneRequiredWithoutVeiculosNestedInput
    contratos?: ContratoLocacaoUpdateManyWithoutVeiculosNestedInput
  }

  export type VeiculoUncheckedUpdateWithoutManutencoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
    contratos?: ContratoLocacaoUncheckedUpdateManyWithoutVeiculosNestedInput
  }

  export type VeiculoCreateWithoutContratosInput = {
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modelo: ModeloCreateNestedOneWithoutVeiculosInput
    manutencoes?: ManutencaoCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoUncheckedCreateWithoutContratosInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
    modeloId: number
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutVeiculoInput
  }

  export type VeiculoCreateOrConnectWithoutContratosInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput>
  }

  export type OcorrenciaCreateWithoutContratoInput = {
    descricao: string
    dataOcorrencia: Date | string
    valorOcorrencia: number
  }

  export type OcorrenciaUncheckedCreateWithoutContratoInput = {
    id?: number
    descricao: string
    dataOcorrencia: Date | string
    valorOcorrencia: number
  }

  export type OcorrenciaCreateOrConnectWithoutContratoInput = {
    where: OcorrenciaWhereUniqueInput
    create: XOR<OcorrenciaCreateWithoutContratoInput, OcorrenciaUncheckedCreateWithoutContratoInput>
  }

  export type OcorrenciaCreateManyContratoInputEnvelope = {
    data: OcorrenciaCreateManyContratoInput | OcorrenciaCreateManyContratoInput[]
    skipDuplicates?: boolean
  }

  export type PagamentoCreateWithoutContratoInput = {
    data: Date | string
    valorPago: number
    formaPagamento: string
  }

  export type PagamentoUncheckedCreateWithoutContratoInput = {
    id?: number
    data: Date | string
    valorPago: number
    formaPagamento: string
  }

  export type PagamentoCreateOrConnectWithoutContratoInput = {
    where: PagamentoWhereUniqueInput
    create: XOR<PagamentoCreateWithoutContratoInput, PagamentoUncheckedCreateWithoutContratoInput>
  }

  export type PagamentoCreateManyContratoInputEnvelope = {
    data: PagamentoCreateManyContratoInput | PagamentoCreateManyContratoInput[]
    skipDuplicates?: boolean
  }

  export type VeiculoUpsertWithWhereUniqueWithoutContratosInput = {
    where: VeiculoWhereUniqueInput
    update: XOR<VeiculoUpdateWithoutContratosInput, VeiculoUncheckedUpdateWithoutContratosInput>
    create: XOR<VeiculoCreateWithoutContratosInput, VeiculoUncheckedCreateWithoutContratosInput>
  }

  export type VeiculoUpdateWithWhereUniqueWithoutContratosInput = {
    where: VeiculoWhereUniqueInput
    data: XOR<VeiculoUpdateWithoutContratosInput, VeiculoUncheckedUpdateWithoutContratosInput>
  }

  export type VeiculoUpdateManyWithWhereWithoutContratosInput = {
    where: VeiculoScalarWhereInput
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyWithoutContratosInput>
  }

  export type OcorrenciaUpsertWithWhereUniqueWithoutContratoInput = {
    where: OcorrenciaWhereUniqueInput
    update: XOR<OcorrenciaUpdateWithoutContratoInput, OcorrenciaUncheckedUpdateWithoutContratoInput>
    create: XOR<OcorrenciaCreateWithoutContratoInput, OcorrenciaUncheckedCreateWithoutContratoInput>
  }

  export type OcorrenciaUpdateWithWhereUniqueWithoutContratoInput = {
    where: OcorrenciaWhereUniqueInput
    data: XOR<OcorrenciaUpdateWithoutContratoInput, OcorrenciaUncheckedUpdateWithoutContratoInput>
  }

  export type OcorrenciaUpdateManyWithWhereWithoutContratoInput = {
    where: OcorrenciaScalarWhereInput
    data: XOR<OcorrenciaUpdateManyMutationInput, OcorrenciaUncheckedUpdateManyWithoutContratoInput>
  }

  export type OcorrenciaScalarWhereInput = {
    AND?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
    OR?: OcorrenciaScalarWhereInput[]
    NOT?: OcorrenciaScalarWhereInput | OcorrenciaScalarWhereInput[]
    id?: IntFilter<"Ocorrencia"> | number
    descricao?: StringFilter<"Ocorrencia"> | string
    dataOcorrencia?: DateTimeFilter<"Ocorrencia"> | Date | string
    valorOcorrencia?: FloatFilter<"Ocorrencia"> | number
    contratoId?: IntFilter<"Ocorrencia"> | number
  }

  export type PagamentoUpsertWithWhereUniqueWithoutContratoInput = {
    where: PagamentoWhereUniqueInput
    update: XOR<PagamentoUpdateWithoutContratoInput, PagamentoUncheckedUpdateWithoutContratoInput>
    create: XOR<PagamentoCreateWithoutContratoInput, PagamentoUncheckedCreateWithoutContratoInput>
  }

  export type PagamentoUpdateWithWhereUniqueWithoutContratoInput = {
    where: PagamentoWhereUniqueInput
    data: XOR<PagamentoUpdateWithoutContratoInput, PagamentoUncheckedUpdateWithoutContratoInput>
  }

  export type PagamentoUpdateManyWithWhereWithoutContratoInput = {
    where: PagamentoScalarWhereInput
    data: XOR<PagamentoUpdateManyMutationInput, PagamentoUncheckedUpdateManyWithoutContratoInput>
  }

  export type PagamentoScalarWhereInput = {
    AND?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
    OR?: PagamentoScalarWhereInput[]
    NOT?: PagamentoScalarWhereInput | PagamentoScalarWhereInput[]
    id?: IntFilter<"Pagamento"> | number
    data?: DateTimeFilter<"Pagamento"> | Date | string
    valorPago?: FloatFilter<"Pagamento"> | number
    formaPagamento?: StringFilter<"Pagamento"> | string
    contratoId?: IntFilter<"Pagamento"> | number
  }

  export type ContratoLocacaoCreateWithoutOcorrenciasInput = {
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    veiculos?: VeiculoCreateNestedManyWithoutContratosInput
    pagamentos?: PagamentoCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput = {
    id?: number
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutContratosInput
    pagamentos?: PagamentoUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoCreateOrConnectWithoutOcorrenciasInput = {
    where: ContratoLocacaoWhereUniqueInput
    create: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
  }

  export type ContratoLocacaoUpsertWithoutOcorrenciasInput = {
    update: XOR<ContratoLocacaoUpdateWithoutOcorrenciasInput, ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput>
    create: XOR<ContratoLocacaoCreateWithoutOcorrenciasInput, ContratoLocacaoUncheckedCreateWithoutOcorrenciasInput>
    where?: ContratoLocacaoWhereInput
  }

  export type ContratoLocacaoUpdateToOneWithWhereWithoutOcorrenciasInput = {
    where?: ContratoLocacaoWhereInput
    data: XOR<ContratoLocacaoUpdateWithoutOcorrenciasInput, ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput>
  }

  export type ContratoLocacaoUpdateWithoutOcorrenciasInput = {
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUpdateManyWithoutContratosNestedInput
    pagamentos?: PagamentoUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateWithoutOcorrenciasInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUncheckedUpdateManyWithoutContratosNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoCreateWithoutPagamentosInput = {
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    veiculos?: VeiculoCreateNestedManyWithoutContratosInput
    ocorrencias?: OcorrenciaCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoUncheckedCreateWithoutPagamentosInput = {
    id?: number
    dataLocacao: Date | string
    dataDevolucao: Date | string
    valorCaucao: number
    valorTotal: number
    status: string
    veiculos?: VeiculoUncheckedCreateNestedManyWithoutContratosInput
    ocorrencias?: OcorrenciaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoLocacaoCreateOrConnectWithoutPagamentosInput = {
    where: ContratoLocacaoWhereUniqueInput
    create: XOR<ContratoLocacaoCreateWithoutPagamentosInput, ContratoLocacaoUncheckedCreateWithoutPagamentosInput>
  }

  export type ContratoLocacaoUpsertWithoutPagamentosInput = {
    update: XOR<ContratoLocacaoUpdateWithoutPagamentosInput, ContratoLocacaoUncheckedUpdateWithoutPagamentosInput>
    create: XOR<ContratoLocacaoCreateWithoutPagamentosInput, ContratoLocacaoUncheckedCreateWithoutPagamentosInput>
    where?: ContratoLocacaoWhereInput
  }

  export type ContratoLocacaoUpdateToOneWithWhereWithoutPagamentosInput = {
    where?: ContratoLocacaoWhereInput
    data: XOR<ContratoLocacaoUpdateWithoutPagamentosInput, ContratoLocacaoUncheckedUpdateWithoutPagamentosInput>
  }

  export type ContratoLocacaoUpdateWithoutPagamentosInput = {
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUpdateManyWithoutContratosNestedInput
    ocorrencias?: OcorrenciaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateWithoutPagamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    veiculos?: VeiculoUncheckedUpdateManyWithoutContratosNestedInput
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ModeloCreateManyCategoriaInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    marcaId: number
  }

  export type ModeloUpdateWithoutCategoriaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    marca?: MarcaUpdateOneRequiredWithoutModelosNestedInput
    veiculos?: VeiculoUpdateManyWithoutModeloNestedInput
  }

  export type ModeloUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    marcaId?: IntFieldUpdateOperationsInput | number
    veiculos?: VeiculoUncheckedUpdateManyWithoutModeloNestedInput
  }

  export type ModeloUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    marcaId?: IntFieldUpdateOperationsInput | number
  }

  export type ModeloCreateManyMarcaInput = {
    id?: number
    nome: string
    anoModelo: Date | string
    qtModelo: number
    categoriaId: number
  }

  export type ModeloUpdateWithoutMarcaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutModelosNestedInput
    veiculos?: VeiculoUpdateManyWithoutModeloNestedInput
  }

  export type ModeloUncheckedUpdateWithoutMarcaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    veiculos?: VeiculoUncheckedUpdateManyWithoutModeloNestedInput
  }

  export type ModeloUncheckedUpdateManyWithoutMarcaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    anoModelo?: DateTimeFieldUpdateOperationsInput | Date | string
    qtModelo?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type VeiculoCreateManyModeloInput = {
    id?: number
    placa: string
    chassi: string
    anoFabricacao: Date | string
    cor: string
    status: string
  }

  export type VeiculoUpdateWithoutModeloInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    manutencoes?: ManutencaoUpdateManyWithoutVeiculoNestedInput
    contratos?: ContratoLocacaoUpdateManyWithoutVeiculosNestedInput
  }

  export type VeiculoUncheckedUpdateWithoutModeloInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutVeiculoNestedInput
    contratos?: ContratoLocacaoUncheckedUpdateManyWithoutVeiculosNestedInput
  }

  export type VeiculoUncheckedUpdateManyWithoutModeloInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ManutencaoCreateManyVeiculoInput = {
    id?: number
    descricao: string
    dataManutencao: Date | string
    valorManutencao: number
  }

  export type ManutencaoUpdateWithoutVeiculoInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
  }

  export type ManutencaoUncheckedUpdateWithoutVeiculoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
  }

  export type ManutencaoUncheckedUpdateManyWithoutVeiculoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataManutencao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorManutencao?: FloatFieldUpdateOperationsInput | number
  }

  export type ContratoLocacaoUpdateWithoutVeiculosInput = {
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUpdateManyWithoutContratoNestedInput
    pagamentos?: PagamentoUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateWithoutVeiculosInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    ocorrencias?: OcorrenciaUncheckedUpdateManyWithoutContratoNestedInput
    pagamentos?: PagamentoUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoLocacaoUncheckedUpdateManyWithoutVeiculosInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataLocacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataDevolucao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorCaucao?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type OcorrenciaCreateManyContratoInput = {
    id?: number
    descricao: string
    dataOcorrencia: Date | string
    valorOcorrencia: number
  }

  export type PagamentoCreateManyContratoInput = {
    id?: number
    data: Date | string
    valorPago: number
    formaPagamento: string
  }

  export type VeiculoUpdateWithoutContratosInput = {
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modelo?: ModeloUpdateOneRequiredWithoutVeiculosNestedInput
    manutencoes?: ManutencaoUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateManyWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    chassi?: StringFieldUpdateOperationsInput | string
    anoFabricacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cor?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    modeloId?: IntFieldUpdateOperationsInput | number
  }

  export type OcorrenciaUpdateWithoutContratoInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
  }

  export type OcorrenciaUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
  }

  export type OcorrenciaUncheckedUpdateManyWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    dataOcorrencia?: DateTimeFieldUpdateOperationsInput | Date | string
    valorOcorrencia?: FloatFieldUpdateOperationsInput | number
  }

  export type PagamentoUpdateWithoutContratoInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
  }

  export type PagamentoUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
  }

  export type PagamentoUncheckedUpdateManyWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valorPago?: FloatFieldUpdateOperationsInput | number
    formaPagamento?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}